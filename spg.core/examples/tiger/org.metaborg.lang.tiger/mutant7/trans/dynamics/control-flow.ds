module control-flow

imports ds-signatures/Tiger-sig
imports dynamics/base
imports dynamics/store
imports dynamics/natives
imports dynamics/numbers

signature
  constructors
    BreakV : V
    Breakable : Exp * Exp -> Exp
  arrows
    E |- evalSeq(List(Exp)) :: H --> V :: H
  
rules

  Seq(es) --> evalSeq(es).
  
  evalSeq([]) --> UnitV().  
  
  evalSeq([v]) --> v.  
  
  evalSeq([v | es@[_|_]]) --> v
  where
    case v of {
      BreakV() =>
        BreakV() => v
      otherwise =>
        evalSeq(es) --> v
    }.
  
  
  IfThen(e1, e2) --> If(e1, e2, Seq([])).
  
  If(IntV(i), e1, e2) --> v
  where
    case i of {
      0 =>
        e2 --> v
      otherwise =>
        e1 --> v
    }.
  
  e@While(e1, e2) --> IfThen(e1, Breakable(e2, e)).
  
  Breakable(v1, e2) --> v
  where
    case v1 of {
      BreakV() =>
        UnitV() => v
      otherwise =>
        e2 --> v
    }.
  
  For(Var(x), e1, e2, e3) -->
    Let([VarDecNoType(x, e1),
         VarDecNoType(end, e2)], 
        [While(Leq(Var(x), Var(end)), Seq([
           e3,
           Assign(Var(x), Plus(Var(x), Int("1")))
         ]))])
  where printI(fresh) : Id => end.  // capture?
  
  Break() --> BreakV().
  
