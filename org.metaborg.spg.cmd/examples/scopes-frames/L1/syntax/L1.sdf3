module L1

context-free start-symbols
  
  Start Exp Type

context-free syntax
  
  Start.Program = Exp
  
context-free syntax // Exp

  Exp.IntValue = INT
  
  Exp.Var = ID
  
  Exp.Add = <<Exp> + <Exp>> {left}
  
  Exp.Fun = <fun(<ID>: <Type>) {
    <Exp>
  }>

  Exp.App = <<Exp>(<ResetExp>)>
  
  // Hack to allow e.g. addition as argument to an application
  ResetExp = Exp
  
context-free syntax // Types

  Type.IntType = <Int>
  
  Type.FunType = <<Type> -\> <Type>> {right}

context-free priorities

  Exp.App > Exp.Add

lexical syntax

  ID             = [a-zA-Z] [a-zA-Z0-9]* 
  INT            = "-"? [0-9]+ 
  STRING         = "\"" StringChar* "\"" 
  StringChar     = ~[\"\n] 
  StringChar     = "\\\"" 
  StringChar     = BackSlashChar 
  BackSlashChar  = "\\" 
  LAYOUT         = [\ \t\n\r] 
  CommentChar    = [\*] 
  LAYOUT         = "/*" InsideComment* "*/" 
  InsideComment  = ~[\*] 
  InsideComment  = CommentChar 
  LAYOUT         = "//" ~[\n\r]* NewLineEOF 
  NewLineEOF     = [\n\r] 
  NewLineEOF     = EOF 
  EOF            =  

lexical restrictions

  // Ensure greedy matching for lexicals
  
  CommentChar   -/- [\/]
  INT           -/- [0-9]
  ID            -/- [a-zA-Z0-9\_]
  
  // EOF may not be followed by any char
  
  EOF           -/- ~[]
  
  // Backslash chars in strings may not be followed by " 
  
  BackSlashChar -/- [\"]

context-free restrictions

  // Ensure greedy matching for comments
  
  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]
