===================================
2016-12-13T01:05:58.159+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x75789"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T01:07:05.695+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x2228883"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T01:07:05.727+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x2230521"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\\n"
))
-----------------------------------
===================================
2016-12-13T01:07:06.022+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("NilExp", List()), TermAppl("Let", List(TermAppl("Nil", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))), TermAppl("Nil", List()))))))))))))),List(CDistinct(Declarations(TermAppl("s_body", List()), "All"))),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1)), CGDirectEdge(Var("x2238618"),Label('P'),TermAppl("s", List()))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil >= let
   in
    nil
  end;
  nil;
  (
    nil;
    nil
  )
))
-----------------------------------
===================================
2016-12-13T01:07:23.539+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x2798554"))), TermAppl("Cons", List(TermAppl("String", List(Var("x2798732"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "]";
  "2\406\292"
))
-----------------------------------
===================================
2016-12-13T01:08:08.451+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:08:11.095+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:08:20.332+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Lt", List(TermAppl("String", List(Var("x4804095"))), TermAppl("String", List(Var("x4804483"))))), TermAppl("Cons", List(TermAppl("String", List(Var("x4801620"))), TermAppl("Cons", List(TermAppl("String", List(Var("x4802920"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" < "";
  "\368\t";
  "\^Y\nX"
))
-----------------------------------
===================================
2016-12-13T01:08:22.928+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x4895284"))), TermAppl("Cons", List(TermAppl("String", List(Var("x4895672"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"5";
  "\\\\"
))
-----------------------------------
===================================
2016-12-13T01:09:11.223+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x6522524"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\^P"
))
-----------------------------------
===================================
2016-12-13T01:09:19.639+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:10:29.743+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x9215698"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\t\^T\t!"
))
-----------------------------------
===================================
2016-12-13T01:10:38.401+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Uminus", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))), TermAppl("Cons", List(TermAppl("String", List(Var("x9531391"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  - (
    (
      nil >= nil
    )
  );
  "+\\"
))
-----------------------------------
===================================
2016-12-13T01:11:36.338+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x11572987"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\

	\\	
\"
))
-----------------------------------
===================================
2016-12-13T01:11:44.007+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x11857195"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\	\"
))
-----------------------------------
===================================
2016-12-13T01:12:01.914+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:12:02.246+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x12526661"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\n"
))
-----------------------------------
===================================
2016-12-13T01:12:20.48+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:13:04.617+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:13:15.209+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T01:13:52.005+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:13:56.383+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x16366814"))), TermAppl("Cons", List(TermAppl("String", List(Var("x16366992"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T01:14:02.245+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x16570214"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
  )
))
-----------------------------------
===================================
2016-12-13T01:14:26.243+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Gt", List(TermAppl("String", List(Var("x17333988"))), TermAppl("String", List(Var("x17331024"))))), TermAppl("Cons", List(TermAppl("String", List(Var("x17327957"))), TermAppl("Nil", List()))))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    "" > "\^N\	 \\ \\n\t";
    "\t"
  );
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:14:55.466+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x18316818"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T01:15:11.867+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Uminus", List(TermAppl("Geq", List(TermAppl("String", List(Var("x18912319"))), TermAppl("String", List(Var("x18910391"))))))), TermAppl("Cons", List(TermAppl("String", List(Var("x18911241"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  - ("" >= "\n");
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T01:15:19.043+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:15:42.262+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T01:15:56.276+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x20418891"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T01:16:11.316+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x20957479"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T01:17:11.108+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x23027241"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T01:17:21.196+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x23391305"))), TermAppl("Cons", List(TermAppl("String", List(Var("x23390917"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T01:17:21.389+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:17:26.554+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x23579410"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\n";
  nil
))
-----------------------------------
===================================
2016-12-13T01:17:51.291+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x24459963"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T01:17:52.657+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T01:18:18.792+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:18:23.027+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x25561828"))), TermAppl("Cons", List(TermAppl("String", List(Var("x25562216"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "hK>"
))
-----------------------------------
===================================
2016-12-13T01:18:47.583+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:18:51.164+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:18:53.888+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x26584371"))), TermAppl("Cons", List(TermAppl("String", List(Var("x26586059"))), TermAppl("Cons", List(TermAppl("String", List(Var("x26585671"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\n";
  "\t"
))
-----------------------------------
===================================
2016-12-13T01:19:02.744+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:19:11.34+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x27209169"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil;
  "l\^H"
))
-----------------------------------
===================================
2016-12-13T01:19:46.096+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("And", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil & nil
))
-----------------------------------
===================================
2016-12-13T01:20:20.693+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x29610120"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\613";
  nil
))
-----------------------------------
===================================
2016-12-13T01:23:09.205+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x35245059"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t";
  nil
))
-----------------------------------
===================================
2016-12-13T01:23:13.531+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x35398758"))), TermAppl("Cons", List(TermAppl("String", List(Var("x35399146"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"\^K";
  "\771"
))
-----------------------------------
===================================
2016-12-13T01:23:15.99+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
    nil
  )
))
-----------------------------------
===================================
2016-12-13T01:23:31.997+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x36008389"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\\^Z"
))
-----------------------------------
===================================
2016-12-13T01:24:15.267+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x37523996"))), TermAppl("Cons", List(TermAppl("String", List(Var("x37524174"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T01:24:24.526+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:24:48.56+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x38632690"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"\t\^Q";
  nil
))
-----------------------------------
===================================
2016-12-13T01:25:49.524+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x40739640"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T01:26:17.374+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x41712905"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T01:26:51.722+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x42803084"))), TermAppl("Cons", List(TermAppl("String", List(Var("x42803472"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T01:27:26.334+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x44099271"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T01:28:02.81+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x45568694"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\\\\\
	\m"
))
-----------------------------------
===================================
2016-12-13T01:28:30.404+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:28:46.551+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:29:05.14+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x48087099"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\ \\\\005\^U";
  nil
))
-----------------------------------
===================================
2016-12-13T01:29:31.388+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:29:44.593+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x49666377"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil;
  "\nA\n"
))
-----------------------------------
===================================
2016-12-13T01:29:53.257+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
    nil
  )
))
-----------------------------------
===================================
2016-12-13T01:30:34.441+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:30:39.083+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:30:50.298+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x52145297"))), TermAppl("Cons", List(TermAppl("String", List(Var("x52144909"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n\
\";
  ""
))
-----------------------------------
===================================
2016-12-13T01:31:35.997+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:31:36.025+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x54006090"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T01:31:56.03+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:33:19.206+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x58047744"))), TermAppl("Cons", List(TermAppl("String", List(Var("x58047922"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T01:33:41.196+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x58850235"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))), TermAppl("Cons", List(TermAppl("String", List(Var("x58850413"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    "";
    nil
  );
  ""
))
-----------------------------------
===================================
2016-12-13T01:33:45.437+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x59015121"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("String", List(Var("x59014555"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    "\n"
  );
  "\t"
))
-----------------------------------
===================================
2016-12-13T01:33:54.769+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x59437669"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x59438235"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T01:34:30.852+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x60781814"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil;
  "\^M\t\"\t\\\""
))
-----------------------------------
===================================
2016-12-13T01:34:50.687+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x61554968"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T01:34:53.411+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x61668665"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
  )
))
-----------------------------------
===================================
2016-12-13T01:34:53.456+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:34:57.43+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x61812858"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x61813738"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T01:35:06.494+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x62184133"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("String", List(Var("x62185821"))), TermAppl("Cons", List(TermAppl("String", List(Var("x62185433"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    "\n\n\^T\n\t"
  );
  "";
  "\n\
	 
  \\""
))
-----------------------------------
===================================
2016-12-13T01:35:06.5+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x62186159"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T01:35:06.581+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x62190018"))), TermAppl("Cons", List(TermAppl("String", List(Var("x62190898"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\692\"";
  nil
))
-----------------------------------
===================================
2016-12-13T01:35:26.949+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x63007210"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:35:47.857+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x63879457"))), TermAppl("Cons", List(TermAppl("String", List(Var("x63879069"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\n"
))
-----------------------------------
===================================
2016-12-13T01:35:57.864+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x64269723"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\\705"
))
-----------------------------------
===================================
2016-12-13T01:36:01.651+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:36:01.657+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x64420724"))), TermAppl("Cons", List(TermAppl("String", List(Var("x64420902"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n\^V@\t";
  "\n"
))
-----------------------------------
===================================
2016-12-13T01:36:10.216+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T01:36:17.06+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x65045575"))), TermAppl("Cons", List(TermAppl("String", List(Var("x65045753"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\\\\\^V"
))
-----------------------------------
===================================
2016-12-13T01:36:25.491+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x65374961"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T01:36:26.515+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x65419886"))), TermAppl("Cons", List(TermAppl("String", List(Var("x65420064"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\";
  ""
))
-----------------------------------
===================================
2016-12-13T01:36:29.403+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x65535358"))), TermAppl("Cons", List(TermAppl("String", List(Var("x65534970"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T01:37:00.327+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Leq", List(TermAppl("String", List(Var("x66744175"))), TermAppl("String", List(Var("x66744563"))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\
	\" <= "\\\	 \\805";
  nil
))
-----------------------------------
===================================
2016-12-13T01:38:20.845+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x69882449"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x69883015"))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t";
  (
    ""
  )
))
-----------------------------------
===================================
2016-12-13T01:38:45.701+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x70827780"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\n\\";
  nil
))
-----------------------------------
===================================
2016-12-13T01:39:41.417+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x73035113"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\""
))
-----------------------------------
===================================
2016-12-13T01:39:48.957+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x73322943"))), TermAppl("Cons", List(TermAppl("String", List(Var("x73326213"))), TermAppl("Cons", List(TermAppl("String", List(Var("x73324525"))), TermAppl("Cons", List(TermAppl("String", List(Var("x73325825"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\"";
  "\t";
  ""
))
-----------------------------------
===================================
2016-12-13T01:39:50.213+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:40:01.766+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x73810402"))), TermAppl("Cons", List(TermAppl("String", List(Var("x73810580"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  "\398"
))
-----------------------------------
===================================
2016-12-13T01:40:58.832+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Lt", List(TermAppl("Lt", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Geq", List(TermAppl("String", List(Var("x75982100"))), TermAppl("String", List(Var("x75978275"))))))), TermAppl("Cons", List(TermAppl("String", List(Var("x75981792"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (nil < nil) < ("" >= "\t");
  "\808"
))
-----------------------------------
===================================
2016-12-13T01:41:36.86+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x77489936"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\\"\n\
\\t\358";
  nil
))
-----------------------------------
===================================
2016-12-13T01:42:02.397+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:42:28.378+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:43:47.877+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x82610206"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\ \\t\456";
  nil
))
-----------------------------------
===================================
2016-12-13T01:44:46.484+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x84838184"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T01:45:27.152+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x86371799"))), TermAppl("Cons", List(TermAppl("String", List(Var("x86371977"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n\"";
  "\954*"
))
-----------------------------------
===================================
2016-12-13T01:46:47.848+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x89442334"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x89442530"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\
\";
  (
  );
  "f"
))
-----------------------------------
===================================
2016-12-13T01:47:44.895+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x91669089"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\n";
  (
  )
))
-----------------------------------
===================================
2016-12-13T01:47:47.414+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x91769860"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\

		\";
  nil
))
-----------------------------------
===================================
2016-12-13T01:47:58.835+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Uminus", List(TermAppl("Or", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  - (nil | nil);
  nil
))
-----------------------------------
===================================
2016-12-13T01:48:18.059+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x92974223"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\tu";
  nil
))
-----------------------------------
===================================
2016-12-13T01:48:23.057+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x93186966"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T01:49:36.646+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x96032593"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("String", List(Var("x96032415"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    "\t\	\m\917"
  );
  "\t\426\"\	 
\"
))
-----------------------------------
===================================
2016-12-13T01:49:40.165+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:51:37.003+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x100663577"))), TermAppl("Cons", List(TermAppl("String", List(Var("x100663965"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\ \\432\n";
  ""
))
-----------------------------------
===================================
2016-12-13T01:52:12.669+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x102057504"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("String", List(Var("x102057116"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    "\^C\\P"
  );
  ""
))
-----------------------------------
===================================
2016-12-13T01:52:18.303+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x102279547"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\ 	  			\"
))
-----------------------------------
===================================
2016-12-13T01:52:41.526+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x103186041"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T01:52:56.653+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x103771961"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T01:52:56.674+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Leq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil <= nil
))
-----------------------------------
===================================
2016-12-13T01:52:57.942+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T01:53:17.852+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x104626394"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\
		  \\t\t";
  nil
))
-----------------------------------
===================================
2016-12-13T01:53:57.745+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x106197076"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T01:54:36.259+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T01:55:07.225+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:55:50.613+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x110531594"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x110532652"))), TermAppl("Cons", List(TermAppl("String", List(Var("x110533040"))), TermAppl("Nil", List()))))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
    "\t";
    ""
  )
))
-----------------------------------
===================================
2016-12-13T01:56:14.402+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x111436259"))), TermAppl("Cons", List(TermAppl("String", List(Var("x111436437"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"\585\n\^U\"";
  "\"\\"
))
-----------------------------------
===================================
2016-12-13T01:56:42.832+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Eq", List(TermAppl("Leq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Uminus", List(TermAppl("Neq", List(TermAppl("String", List(Var("x112523005"))), TermAppl("String", List(Var("x112522617"))))))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (nil <= nil) = - ("" <> "");
  nil
))
-----------------------------------
===================================
2016-12-13T01:57:30.744+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x114419807"))), TermAppl("Cons", List(TermAppl("String", List(Var("x114419419"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T01:58:20.122+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("Uminus", List(TermAppl("And", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  - (nil & nil)
))
-----------------------------------
===================================
2016-12-13T01:58:21.435+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T01:58:50.323+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x117517779"))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil;
  (
    "\ \E"
  )
))
-----------------------------------
===================================
2016-12-13T01:59:01.744+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x117914655"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "/"
))
-----------------------------------
===================================
2016-12-13T01:59:04.49+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x118001128"))), TermAppl("Cons", List(TermAppl("String", List(Var("x118001516"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T01:59:04.891+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x118025178"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T01:59:50.256+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x119734637"))), TermAppl("Cons", List(TermAppl("Or", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x119736168"))), TermAppl("Nil", List()))))), TermAppl("String", List(Var("x119735990"))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
    "\788\^R"
  ) | ""
))
-----------------------------------
===================================
2016-12-13T02:00:23.398+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x121010875"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:00:28.934+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x121263920"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\n"
))
-----------------------------------
===================================
2016-12-13T02:01:12.857+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:01:14.912+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x123086646"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t\	
 \"
))
-----------------------------------
===================================
2016-12-13T02:02:00.627+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x124892613"))), TermAppl("Cons", List(TermAppl("String", List(Var("x124893881"))), TermAppl("Cons", List(TermAppl("String", List(Var("x124893493"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\^V\n\\\"\n";
  "\596"
))
-----------------------------------
===================================
2016-12-13T02:02:10.888+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:02:55.252+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:03:06.174+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x127457410"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x127458856"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^W\\";
  (
    "."
  );
  nil
))
-----------------------------------
===================================
2016-12-13T02:03:16.634+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x127877642"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T02:04:04.227+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:04:07.156+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x129850744"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    ""
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T02:04:11.589+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x130018093"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T02:04:22.71+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x130478489"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "]"
))
-----------------------------------
===================================
2016-12-13T02:04:22.716+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T02:04:33.062+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:05:08.632+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x132295903"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:05:09.13+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x132319038"))), TermAppl("Cons", List(TermAppl("String", List(Var("x132318650"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T02:07:01.92+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x136724386"))), TermAppl("Cons", List(TermAppl("Or", List(TermAppl("String", List(Var("x136722926"))), TermAppl("String", List(Var("x136723998"))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\283\^E\"";
  "" | ""
))
-----------------------------------
===================================
2016-12-13T02:07:32.392+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:07:46.353+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
    (
      (
      )
    )
  )
))
-----------------------------------
===================================
2016-12-13T02:07:50.977+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x138622325"))), TermAppl("Cons", List(TermAppl("String", List(Var("x138622713"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T02:07:55.624+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x138789207"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\ 	 \"
))
-----------------------------------
===================================
2016-12-13T02:08:04.913+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x139171541"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T02:08:34.755+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x140275852"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:08:41.092+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x140535183"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\ \'6"
))
-----------------------------------
===================================
2016-12-13T02:09:23.306+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:10:27.871+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x144754877"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\"
))
-----------------------------------
===================================
2016-12-13T02:10:41.628+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x145293538"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T02:10:57.845+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x145922325"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "v\\\652[";
  nil
))
-----------------------------------
===================================
2016-12-13T02:11:02.781+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x146120717"))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil;
  (
    ""
  )
))
-----------------------------------
===================================
2016-12-13T02:11:09.318+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:11:16.563+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x146655851"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\ \y";
  nil
))
-----------------------------------
===================================
2016-12-13T02:11:30.04+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x147154269"))), TermAppl("Cons", List(TermAppl("String", List(Var("x147154657"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T02:11:34.92+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("String", List(Var("x147331840"))), TermAppl("String", List(Var("x147330472"))))), TermAppl("Cons", List(TermAppl("String", List(Var("x147331532"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "4\t\\" >= "";
  ""
))
-----------------------------------
===================================
2016-12-13T02:11:56.754+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:12:24.705+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x149263446"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T02:13:19.639+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T02:13:21.599+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x151465932"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^X";
  (
    nil
  )
))
-----------------------------------
===================================
2016-12-13T02:14:01.322+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x153076347"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"\t";
  (
  )
))
-----------------------------------
===================================
2016-12-13T02:14:03.794+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:14:07.595+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:15:13.34+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:15:18.678+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x155984587"))), TermAppl("Cons", List(TermAppl("String", List(Var("x155984975"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\n\^Z"
))
-----------------------------------
===================================
2016-12-13T02:16:00.746+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:16:52.565+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x159628062"))), TermAppl("Cons", List(TermAppl("String", List(Var("x159628240"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^X";
  ""
))
-----------------------------------
===================================
2016-12-13T02:17:02.613+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x160001362"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\"\n"
))
-----------------------------------
===================================
2016-12-13T02:17:23.839+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:17:26.94+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x160962426"))), TermAppl("Cons", List(TermAppl("String", List(Var("x160962604"))), TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "";
  nil >= nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:17:40.056+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:17:58.249+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x162154851"))), TermAppl("Cons", List(TermAppl("String", List(Var("x162155239"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "v";
  "\""
))
-----------------------------------
===================================
2016-12-13T02:18:34.755+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T02:18:37.296+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:18:42.954+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x163818383"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T02:19:33.97+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T02:19:51.607+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:19:57.995+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Uminus", List(TermAppl("And", List(TermAppl("String", List(Var("x166708362"))), TermAppl("String", List(Var("x166707974"))))))), TermAppl("Cons", List(TermAppl("String", List(Var("x166706827"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  - ("\"" & "\t");
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T02:20:11.602+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x167279554"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:20:33.392+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x168105382"))), TermAppl("Cons", List(TermAppl("String", List(Var("x168104994"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T02:21:28.597+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("And", List(TermAppl("String", List(Var("x170198047"))), TermAppl("String", List(Var("x170198435"))))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("String", List(Var("x170196804"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    "" & ""
  );
  ""
))
-----------------------------------
===================================
2016-12-13T02:21:39.134+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x170561926"))), TermAppl("Cons", List(TermAppl("String", List(Var("x170562314"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\^W";
  ""
))
-----------------------------------
===================================
2016-12-13T02:22:07.91+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T02:22:12.005+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x171895246"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^R";
  nil
))
-----------------------------------
===================================
2016-12-13T02:22:22.578+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x172291099"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:22:30.691+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Eq", List(TermAppl("String", List(Var("x172586529"))), TermAppl("String", List(Var("x172585667"))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" = "\"\^F";
  nil
))
-----------------------------------
===================================
2016-12-13T02:23:48.377+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x175643761"))), TermAppl("Cons", List(TermAppl("String", List(Var("x175643939"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T02:24:11.325+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x176539493"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    ""
  );
  nil
))
-----------------------------------
===================================
2016-12-13T02:24:42.595+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x177759652"))), TermAppl("Cons", List(TermAppl("String", List(Var("x177759830"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T02:25:10.477+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x178840585"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"2";
  (
  )
))
-----------------------------------
===================================
2016-12-13T02:25:14.309+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x178986870"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T02:25:19.622+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x179204062"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:25:59.525+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:26:11.448+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:26:20.422+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x181587734"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "A\^X6\tm";
  nil
))
-----------------------------------
===================================
2016-12-13T02:26:43.515+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil;
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T02:27:44.675+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x184817483"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\387";
  nil
))
-----------------------------------
===================================
2016-12-13T02:28:59.145+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x187677580"))), TermAppl("Cons", List(TermAppl("String", List(Var("x187677968"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\t\\^\"";
  "\""
))
-----------------------------------
===================================
2016-12-13T02:28:59.214+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("String", List(Var("x187681829"))), TermAppl("String", List(Var("x187682217"))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" >= "\n\	\\ \";
  nil
))
-----------------------------------
===================================
2016-12-13T02:29:12.185+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:29:46.282+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("And", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil & nil
))
-----------------------------------
===================================
2016-12-13T02:29:48.018+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:29:48.038+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T02:29:49.418+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:30:07.206+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x190280499"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:30:09.932+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x190374228"))), TermAppl("Cons", List(TermAppl("String", List(Var("x190374406"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\	\\^J";
  "\	\"
))
-----------------------------------
===================================
2016-12-13T02:30:12.351+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x190469976"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\  		\"
))
-----------------------------------
===================================
2016-12-13T02:30:32.917+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:31:15.526+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Plus", List(TermAppl("Leq", List(TermAppl("NilExp", List()), TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))), TermAppl("Gt", List(TermAppl("String", List(Var("x193021925"))), TermAppl("String", List(Var("x193022935"))))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (nil <= (
    nil
  )) + ("" > "\"");
  nil
))
-----------------------------------
===================================
2016-12-13T02:31:21.48+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x193252588"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T02:31:38.598+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("And", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x193931235"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil & nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:32:11.629+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x195247891"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x195248247"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\\917";
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:32:17.441+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x195487805"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  "\nJ"
))
-----------------------------------
===================================
2016-12-13T02:32:43.669+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x196520321"))), TermAppl("Cons", List(TermAppl("String", List(Var("x196519933"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\064\305\^U\^F";
  ""
))
-----------------------------------
===================================
2016-12-13T02:33:00.346+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x197156794"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "}"
))
-----------------------------------
===================================
2016-12-13T02:33:00.53+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    (
    )
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T02:33:17.452+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x197837501"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^P";
  nil
))
-----------------------------------
===================================
2016-12-13T02:33:35.771+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x198548639"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T02:33:52.371+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x199185585"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^T\n";
  nil
))
-----------------------------------
===================================
2016-12-13T02:35:07.82+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x202196620"))), TermAppl("Cons", List(TermAppl("String", List(Var("x202196798"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\\^V";
  ""
))
-----------------------------------
===================================
2016-12-13T02:35:27.075+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x202908926"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\174";
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T02:35:28.766+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:35:54.481+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Eq", List(TermAppl("String", List(Var("x203955581"))), TermAppl("String", List(Var("x203955969"))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "" = "";
  nil
))
-----------------------------------
===================================
2016-12-13T02:35:54.504+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x203956831"))), TermAppl("Cons", List(TermAppl("String", List(Var("x203957219"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T02:36:09.918+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x204585125"))), TermAppl("Cons", List(TermAppl("String", List(Var("x204585303"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "Z\^F"
))
-----------------------------------
===================================
2016-12-13T02:37:37.003+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:37:44.346+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x208327998"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil;
  "[\t\t\


	
\\"$\\"
))
-----------------------------------
===================================
2016-12-13T02:37:56.241+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x208760253"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T02:38:38.339+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x210412071"))), TermAppl("Cons", List(TermAppl("String", List(Var("x210412249"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\
 \\\\n:"
))
-----------------------------------
===================================
2016-12-13T02:39:17.007+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x211966066"))), TermAppl("Cons", List(TermAppl("String", List(Var("x211966244"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  "{\t\491"
))
-----------------------------------
===================================
2016-12-13T02:39:51.606+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x213279544"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\165\^V\n\\";
  nil
))
-----------------------------------
===================================
2016-12-13T02:40:06.716+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:40:25.12+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    (
    )
  );
  nil
))
-----------------------------------
===================================
2016-12-13T02:40:28.414+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Neq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil <> nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:40:49.639+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x215501424"))), TermAppl("Cons", List(TermAppl("String", List(Var("x215501602"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T02:41:23.034+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:41:49.992+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T02:41:55.806+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x218093660"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\ 	

	\\^K\n\513\t\^O\^T\t";
  nil
))
-----------------------------------
===================================
2016-12-13T02:42:07.376+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:42:09.256+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x218584048"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T02:42:14.571+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:42:47.676+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:42:52.125+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x220256180"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:43:00.641+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x220589129"))), TermAppl("Cons", List(TermAppl("String", List(Var("x220589517"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  ""
))
-----------------------------------
===================================
2016-12-13T02:43:50.931+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x222581718"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:43:51.147+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x222594128"))), TermAppl("Cons", List(TermAppl("String", List(Var("x222594306"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"\\\"\516t";
  ""
))
-----------------------------------
===================================
2016-12-13T02:43:58.216+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x222882172"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "c";
  nil
))
-----------------------------------
===================================
2016-12-13T02:46:00.45+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x227656143"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\"\t\\"
))
-----------------------------------
===================================
2016-12-13T02:46:01.208+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x227697078"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\\"\n\""
))
-----------------------------------
===================================
2016-12-13T02:46:15.628+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:47:09.778+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x230394137"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:47:43.638+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x231681515"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t\	

\"
))
-----------------------------------
===================================
2016-12-13T02:47:48.878+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x231881244"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:48:03.674+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x232501881"))), TermAppl("Cons", List(TermAppl("String", List(Var("x232502059"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\381";
  "\"\\\^Y\n\	 

\\\"
))
-----------------------------------
===================================
2016-12-13T02:48:08.978+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x232724457"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
    nil
  )
))
-----------------------------------
===================================
2016-12-13T02:48:13.14+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x232899991"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T02:48:19.962+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x233165254"))), TermAppl("Cons", List(TermAppl("String", List(Var("x233164866"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T02:48:24.204+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T02:48:44.569+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x234101102"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  (
  )
))
-----------------------------------
===================================
2016-12-13T02:48:53.398+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:48:56.316+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:49:46.902+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x236563567"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\ \\n\t"
))
-----------------------------------
===================================
2016-12-13T02:49:49.062+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x236649625"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  (
    "\n\\\t"
  );
  (
    (
    )
  )
))
-----------------------------------
===================================
2016-12-13T02:49:54.408+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x236886017"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"\"N";
  nil
))
-----------------------------------
===================================
2016-12-13T02:50:08.937+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x237492477"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil >= nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:50:25.394+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:50:43.626+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x238874043"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("String", List(Var("x238875101"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  ".";
  nil;
  (
    nil
  );
  ""
))
-----------------------------------
===================================
2016-12-13T02:51:01.95+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x239609742"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "O\n\^H"
))
-----------------------------------
===================================
2016-12-13T02:51:17.284+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x240215330"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "8\n\^U\	\";
  nil
))
-----------------------------------
===================================
2016-12-13T02:51:38.924+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:52:07.983+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x242212679"))), TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  nil >= nil
))
-----------------------------------
===================================
2016-12-13T02:52:23.853+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x242818173"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\802"
))
-----------------------------------
===================================
2016-12-13T02:52:33.005+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x243173128"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:53:16.87+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x244812180"))), TermAppl("Cons", List(TermAppl("String", List(Var("x244812358"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  "\\\  \";
  nil
))
-----------------------------------
===================================
2016-12-13T02:53:21.571+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x245002619"))), TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("String", List(Var("x245003794"))), TermAppl("String", List(Var("x245004182"))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "c\^T";
  "" >= ""
))
-----------------------------------
===================================
2016-12-13T02:53:25.164+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:53:46.714+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x245991516"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:53:46.722+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x245991676"))), TermAppl("Cons", List(TermAppl("String", List(Var("x245991854"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T02:54:04.765+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x246713535"))), TermAppl("Cons", List(TermAppl("String", List(Var("x246713923"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^V\tN\747\t2";
  ""
))
-----------------------------------
===================================
2016-12-13T02:54:14.032+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T02:54:23.527+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x247448598"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  );
  "\


	

\"
))
-----------------------------------
===================================
2016-12-13T02:54:26.04+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x247546381"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\685";
  nil
))
-----------------------------------
===================================
2016-12-13T02:54:44.615+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x248338874"))), TermAppl("Cons", List(TermAppl("String", List(Var("x248338486"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\	
\\\";
  "\t\057\n\ \"
))
-----------------------------------
===================================
2016-12-13T02:54:48.763+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:55:27.63+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T02:55:28.612+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:55:34.477+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x250299503"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T02:55:38.909+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x250484406"))), TermAppl("Cons", List(TermAppl("String", List(Var("x250484018"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\351";
  "\^Ab"
))
-----------------------------------
===================================
2016-12-13T02:55:38.928+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x250485656"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t\987"
))
-----------------------------------
===================================
2016-12-13T02:56:15.947+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x251877789"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T02:56:27.728+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:58:12.333+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:58:22.936+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T02:58:47.427+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x257667259"))), TermAppl("Cons", List(TermAppl("String", List(Var("x257667437"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\"";
  ""
))
-----------------------------------
===================================
2016-12-13T02:59:05.963+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Leq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil <= nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:59:11.145+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T02:59:31.59+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
    nil
  )
))
-----------------------------------
===================================
2016-12-13T03:00:32.233+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x261679951"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\";
  nil
))
-----------------------------------
===================================
2016-12-13T03:00:52.405+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:00:52.426+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x262494805"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
  )
))
-----------------------------------
===================================
2016-12-13T03:01:02.897+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T03:01:02.916+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:01:29.978+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x263950083"))), TermAppl("Cons", List(TermAppl("String", List(Var("x263950261"))), TermAppl("Cons", List(TermAppl("String", List(Var("x263950439"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\ 	\";
  "\t\n\	\";
  "\ \\n"
))
-----------------------------------
===================================
2016-12-13T03:02:07.413+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:02:42.159+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x266717655"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^J\t\"W\\";
  nil
))
-----------------------------------
===================================
2016-12-13T03:03:02.466+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x267528381"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t\"\n"
))
-----------------------------------
===================================
2016-12-13T03:03:07.871+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x267738692"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T03:03:34.511+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x268752592"))), TermAppl("Cons", List(TermAppl("String", List(Var("x268752204"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T03:04:13.851+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x270305062"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T03:04:17.513+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x270431213"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T03:04:42.243+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:04:42.262+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:05:06.231+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x272306331"))), TermAppl("Cons", List(TermAppl("String", List(Var("x272307599"))), TermAppl("Cons", List(TermAppl("String", List(Var("x272307211"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\t\t";
  ""
))
-----------------------------------
===================================
2016-12-13T03:05:29.556+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x273242891"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\""
))
-----------------------------------
===================================
2016-12-13T03:06:28.896+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x275545369"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "4"
))
-----------------------------------
===================================
2016-12-13T03:06:33.304+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x275706438"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T03:06:33.312+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x275706986"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
    nil
  )
))
-----------------------------------
===================================
2016-12-13T03:07:10.501+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:07:14.838+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x277315674"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T03:07:22.045+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T03:08:29.039+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:08:43.256+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:08:46.985+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x280857348"))), TermAppl("Cons", List(TermAppl("String", List(Var("x280856960"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  "\552\905"
))
-----------------------------------
===================================
2016-12-13T03:08:48.186+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x280913694"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"\169\ 	\";
  nil
))
-----------------------------------
===================================
2016-12-13T03:09:20.466+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Gt", List(TermAppl("String", List(Var("x282149915"))), TermAppl("String", List(Var("x282149527"))))), TermAppl("Cons", List(TermAppl("String", List(Var("x282148352"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" > "";
  "\t"
))
-----------------------------------
===================================
2016-12-13T03:09:35.875+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x282801432"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\n\n"
))
-----------------------------------
===================================
2016-12-13T03:09:52.677+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T03:09:52.686+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x283439391"))), TermAppl("Cons", List(TermAppl("String", List(Var("x283439569"))), TermAppl("Cons", List(TermAppl("String", List(Var("x283439747"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\699\ 
\";
  ""
))
-----------------------------------
===================================
2016-12-13T03:12:08.037+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:12:55.64+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x290561764"))), TermAppl("Cons", List(TermAppl("String", List(Var("x290563242"))), TermAppl("Cons", List(TermAppl("String", List(Var("x290562854"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"3";
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T03:13:03.172+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x290850454"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x290851020"))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\";
  (
    ":"
  )
))
-----------------------------------
===================================
2016-12-13T03:13:05.807+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T03:13:20.15+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x291505512"))), TermAppl("Cons", List(TermAppl("String", List(Var("x291505690"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T03:13:32.689+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:13:45.074+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:13:57.377+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T03:14:02.078+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x293124886"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:14:24.696+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("And", List(TermAppl("String", List(Var("x294038799"))), TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x294039839"))), TermAppl("Nil", List()))))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^N\"\\\^R" & (
    ""
  );
  nil
))
-----------------------------------
===================================
2016-12-13T03:14:53.427+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x295133064"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\\\

\2\t\^X";
  nil
))
-----------------------------------
===================================
2016-12-13T03:14:57.315+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x295300249"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Uminus", List(TermAppl("Or", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x295305164"))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\\nh\\";
  nil;
  - (nil | nil);
  (
    "\n"
  )
))
-----------------------------------
===================================
2016-12-13T03:15:20.112+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T03:15:47.784+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Leq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil <= nil
))
-----------------------------------
===================================
2016-12-13T03:16:05.253+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x297963060"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T03:16:52.625+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T03:20:11.447+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x307711092"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T03:20:40.153+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T03:21:01.33+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x309686114"))), TermAppl("Cons", List(TermAppl("String", List(Var("x309685726"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\252";
  "\ \"
))
-----------------------------------
===================================
2016-12-13T03:21:24.173+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x310560874"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\"";
  nil
))
-----------------------------------
===================================
2016-12-13T03:21:28.887+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x310723706"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T03:21:32.023+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x310864785"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  (
  )
))
-----------------------------------
===================================
2016-12-13T03:21:38.79+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x311141889"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\""
))
-----------------------------------
===================================
2016-12-13T03:22:12.177+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T03:22:23.424+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T03:22:25.288+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x313011374"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "2"
))
-----------------------------------
===================================
2016-12-13T03:23:01.115+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x314399576"))), TermAppl("Cons", List(TermAppl("String", List(Var("x314398276"))), TermAppl("Cons", List(TermAppl("String", List(Var("x314399964"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "r";
  ""
))
-----------------------------------
===================================
2016-12-13T03:23:03.292+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x314497010"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\^M\t"
))
-----------------------------------
===================================
2016-12-13T03:23:44.777+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x316078259"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\618";
  nil
))
-----------------------------------
===================================
2016-12-13T03:24:28.996+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x317763380"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\\^E";
  nil
))
-----------------------------------
===================================
2016-12-13T03:24:55.148+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T03:26:08.396+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x321603429"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\^I"
))
-----------------------------------
===================================
2016-12-13T03:26:09.542+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:26:17.717+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x321970857"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T03:26:44.852+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:26:58.679+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:27:02.148+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:27:38.632+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x325152284"))), TermAppl("Cons", List(TermAppl("String", List(Var("x325152462"))), TermAppl("Cons", List(TermAppl("String", List(Var("x325152640"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T03:29:06.344+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x328533984"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:31:11.715+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x333517501"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "q\""
))
-----------------------------------
===================================
2016-12-13T03:31:35.656+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Eq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x334514574"))), TermAppl("Nil", List()))))))))), TermAppl("Cons", List(TermAppl("String", List(Var("x334511793"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    nil;
    nil = nil;
    "\t"
  );
  "\""
))
-----------------------------------
===================================
2016-12-13T03:31:38.803+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x334648390"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\"";
  nil
))
-----------------------------------
===================================
2016-12-13T03:32:10.395+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x335888751"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\^U"
))
-----------------------------------
===================================
2016-12-13T03:32:10.414+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x335889613"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "R";
  nil
))
-----------------------------------
===================================
2016-12-13T03:32:11.334+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:32:43.181+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T03:33:55.318+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x340055676"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\\382"
))
-----------------------------------
===================================
2016-12-13T03:34:09.148+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:34:16.827+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T03:34:35.534+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:34:42.773+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x341793905"))), TermAppl("Cons", List(TermAppl("String", List(Var("x341794083"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\015\^F"
))
-----------------------------------
===================================
2016-12-13T03:34:55.168+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x342277994"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T03:34:55.187+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x342279422"))), TermAppl("Cons", List(TermAppl("String", List(Var("x342279034"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T03:34:56.63+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x342338991"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T03:34:56.962+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x342357565"))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
    "\132\n"
  )
))
-----------------------------------
===================================
2016-12-13T03:35:28.226+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x343574283"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\\"
))
-----------------------------------
===================================
2016-12-13T03:35:44.118+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Neq", List(TermAppl("String", List(Var("x344247721"))), TermAppl("String", List(Var("x344246649"))))), TermAppl("Cons", List(TermAppl("String", List(Var("x344248109"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^P" <> "\\\\";
  "\

 \\122"
))
-----------------------------------
===================================
2016-12-13T03:36:14.003+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x345443008"))), TermAppl("Cons", List(TermAppl("Eq", List(TermAppl("String", List(Var("x345444639"))), TermAppl("String", List(Var("x345444251"))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "'\		\\509\	\\\\"\^D" = ""
))
-----------------------------------
===================================
2016-12-13T03:36:55.908+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x347099752"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil;
  "\197"
))
-----------------------------------
===================================
2016-12-13T03:36:55.915+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x347100300"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "g";
  (
  )
))
-----------------------------------
===================================
2016-12-13T03:38:18.545+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:38:56.988+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Neq", List(TermAppl("String", List(Var("x351860415"))), TermAppl("String", List(Var("x351859275"))))), TermAppl("Cons", List(TermAppl("Uminus", List(TermAppl("Or", List(TermAppl("String", List(Var("x351857360"))), TermAppl("String", List(Var("x351860107"))))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" <> "\390";
  - ("" | "")
))
-----------------------------------
===================================
2016-12-13T03:39:59.007+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x354340516"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T03:40:59.799+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x356721259"))), TermAppl("Cons", List(TermAppl("String", List(Var("x356721437"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T03:41:33.457+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x358084522"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T03:41:41.865+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
    nil
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T03:42:03.13+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x359294461"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\838"
))
-----------------------------------
===================================
2016-12-13T03:42:31.444+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x360426573"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil;
  "\451\^F\n"
))
-----------------------------------
===================================
2016-12-13T03:42:36.4+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x360621722"))), TermAppl("Cons", List(TermAppl("String", List(Var("x360621900"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\";
  ""
))
-----------------------------------
===================================
2016-12-13T03:42:36.427+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x360623506"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("String", List(Var("x360623328"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
    ""
  );
  "\756\592"
))
-----------------------------------
===================================
2016-12-13T03:42:43.36+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x360885254"))), TermAppl("Cons", List(TermAppl("String", List(Var("x360885432"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T03:42:47.127+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x361048315"))), TermAppl("Cons", List(TermAppl("String", List(Var("x361048703"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T03:43:09.043+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x361941938"))), TermAppl("Cons", List(TermAppl("String", List(Var("x361942116"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\t\^I"
))
-----------------------------------
===================================
2016-12-13T03:43:27.605+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x362681556"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x362682856"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\240";
  nil;
  "\"\^G\"\^L"
))
-----------------------------------
===================================
2016-12-13T03:44:12.157+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x364419495"))), TermAppl("Cons", List(TermAppl("String", List(Var("x364419883"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T03:44:41.112+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x365546352"))), TermAppl("Cons", List(TermAppl("String", List(Var("x365545946"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "";
  "\t"
))
-----------------------------------
===================================
2016-12-13T03:44:41.152+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x365547214"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x365548304"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"\tF\

 \";
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T03:44:47.506+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x365812561"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "O";
  nil
))
-----------------------------------
===================================
2016-12-13T03:45:07.968+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x366607285"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T03:45:17.579+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Leq", List(TermAppl("String", List(Var("x366973246"))), TermAppl("String", List(Var("x366972858"))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "" <= ""
))
-----------------------------------
===================================
2016-12-13T03:45:18.597+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x367031323"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\"\"\""
))
-----------------------------------
===================================
2016-12-13T03:45:21.467+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x367137848"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T03:45:25.531+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x367304239"))), TermAppl("Cons", List(TermAppl("String", List(Var("x367304417"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\458";
  "\""
))
-----------------------------------
===================================
2016-12-13T03:45:25.537+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x367304773"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\"\	 \"
))
-----------------------------------
===================================
2016-12-13T03:45:38.244+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x367810773"))), TermAppl("Cons", List(TermAppl("String", List(Var("x367810951"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "&";
  ""
))
-----------------------------------
===================================
2016-12-13T03:47:07.988+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:47:21.945+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:47:37.585+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:48:04.113+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x373448848"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil;
  (
    nil
  )
))
-----------------------------------
===================================
2016-12-13T03:48:46.287+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x375128638"))), TermAppl("Cons", List(TermAppl("Lt", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Seq", List(TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("String", List(Var("x375131484"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
  ) < (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T03:49:06.112+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x375866235"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\264";
  (
  )
))
-----------------------------------
===================================
2016-12-13T03:49:28.483+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("And", List(TermAppl("String", List(Var("x376730452"))), TermAppl("String", List(Var("x376731314"))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" & "";
  nil
))
-----------------------------------
===================================
2016-12-13T03:49:31.144+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x376851058"))), TermAppl("Cons", List(TermAppl("String", List(Var("x376851236"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T03:49:31.149+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x376851396"))), TermAppl("Cons", List(TermAppl("String", List(Var("x376851574"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\";
  ""
))
-----------------------------------
===================================
2016-12-13T03:50:10.722+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x378478072"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\""
))
-----------------------------------
===================================
2016-12-13T03:50:18.753+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x378790646"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\\"";
  nil
))
-----------------------------------
===================================
2016-12-13T03:50:20.529+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x378856621"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T03:50:22.489+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
    nil
  )
))
-----------------------------------
===================================
2016-12-13T03:50:37.387+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Or", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x379526513"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil | nil;
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T03:50:55.889+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x380228224"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  nil
))
-----------------------------------
===================================
2016-12-13T03:51:10.194+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T03:51:33.741+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x381737867"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T03:51:41.727+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x382039054"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\
\";
  nil
))
-----------------------------------
===================================
2016-12-13T03:51:49.739+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x382361033"))), TermAppl("Cons", List(TermAppl("Neq", List(TermAppl("String", List(Var("x382361998"))), TermAppl("String", List(Var("x382362386"))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "" <> "\""
))
-----------------------------------
===================================
2016-12-13T03:53:10.828+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x385522128"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\\\";
  nil
))
-----------------------------------
===================================
2016-12-13T03:53:10.848+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x385523378"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\220\"";
  nil
))
-----------------------------------
===================================
2016-12-13T03:53:45.706+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x386868209"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\368)\t";
  nil
))
-----------------------------------
===================================
2016-12-13T03:53:55.195+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x387233286"))), TermAppl("Cons", List(TermAppl("String", List(Var("x387233464"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\429";
  "\\"
))
-----------------------------------
===================================
2016-12-13T03:54:30.813+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x388660248"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\^I\"\667"
))
-----------------------------------
===================================
2016-12-13T03:54:54.814+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x389644542"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T03:55:21.078+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Neq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil <> nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:55:47.665+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x391712956"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\ 
	\\^T"
))
-----------------------------------
===================================
2016-12-13T03:56:47.452+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x393995953"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T03:57:08.446+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:57:25.747+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:57:27.189+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))), TermAppl("Cons", List(TermAppl("String", List(Var("x395626522"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    (
      nil
    );
    (
    );
    nil
  );
  "\n\"";
  nil
))
-----------------------------------
===================================
2016-12-13T03:58:12.67+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x397393150"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\002";
  nil
))
-----------------------------------
===================================
2016-12-13T03:58:14.975+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x397497706"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T03:58:28.279+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x398013164"))), TermAppl("Cons", List(TermAppl("String", List(Var("x398013342"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "8";
  ""
))
-----------------------------------
===================================
2016-12-13T03:58:54.301+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x399053628"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t\\"
))
-----------------------------------
===================================
2016-12-13T03:59:12.267+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x399771072"))), TermAppl("Cons", List(TermAppl("String", List(Var("x399771250"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\253\\";
  ""
))
-----------------------------------
===================================
2016-12-13T03:59:12.275+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:59:42.525+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T03:59:44.466+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x400990655"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\	

	 	\\^T";
  nil
))
-----------------------------------
===================================
2016-12-13T03:59:44.498+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("And", List(TermAppl("String", List(Var("x400992938"))), TermAppl("String", List(Var("x400991780"))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" & "\317";
  nil
))
-----------------------------------
===================================
2016-12-13T03:59:48.388+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:01:13.442+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x404498830"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\"
))
-----------------------------------
===================================
2016-12-13T04:01:52.152+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x406006523"))), TermAppl("Cons", List(TermAppl("String", List(Var("x406006701"))), TermAppl("Cons", List(TermAppl("String", List(Var("x406006879"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\\n";
  "\\";
  ""
))
-----------------------------------
===================================
2016-12-13T04:02:27.913+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T04:02:33.08+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Uminus", List(TermAppl("Eq", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x407614057"))), TermAppl("Nil", List()))))), TermAppl("String", List(Var("x407612985"))))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x407614445"))), TermAppl("Cons", List(TermAppl("String", List(Var("x407610830"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  - ((
    ""
  ) = "\^T\
		

\\n");
  nil;
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T04:02:37.829+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x407796112"))), TermAppl("Cons", List(TermAppl("Lt", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\777\^O\496";
  nil < nil
))
-----------------------------------
===================================
2016-12-13T04:02:58.845+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x408623698"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T04:03:07.504+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x408938827"))), TermAppl("Cons", List(TermAppl("String", List(Var("x408939215"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\""
))
-----------------------------------
===================================
2016-12-13T04:03:16.369+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x409291557"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x409291735"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil;
  "\^R\t"
))
-----------------------------------
===================================
2016-12-13T04:03:16.387+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x409292985"))), TermAppl("Cons", List(TermAppl("String", List(Var("x409292597"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  ""
))
-----------------------------------
===================================
2016-12-13T04:03:19.94+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Gt", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil > nil
))
-----------------------------------
===================================
2016-12-13T04:03:27.019+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:03:46.083+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x410408252"))), TermAppl("Cons", List(TermAppl("String", List(Var("x410408430"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T04:03:49.385+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x410535304"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:04:37.039+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x412450709"))), TermAppl("Cons", List(TermAppl("String", List(Var("x412450321"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  "\124"
))
-----------------------------------
===================================
2016-12-13T04:04:37.105+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("And", List(TermAppl("String", List(Var("x412454570"))), TermAppl("String", List(Var("x412454958"))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "" & "\t\	\"
))
-----------------------------------
===================================
2016-12-13T04:05:11.446+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:05:13.803+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("And", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x413771482"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil & nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:05:31.323+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x414511002"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:06:06.536+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T04:07:13.96+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x418531441"))), TermAppl("Cons", List(TermAppl("String", List(Var("x418531829"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\ \\517"
))
-----------------------------------
===================================
2016-12-13T04:09:31.22+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x423960967"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:09:34.852+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x424097528"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T04:09:34.87+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x424098778"))), TermAppl("Cons", List(TermAppl("String", List(Var("x424098390"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T04:10:09.991+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:10:12.01+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x425636178"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x425636534"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:10:20.367+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x425935960"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T04:10:25.158+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T04:10:25.574+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x426156907"))), TermAppl("Cons", List(TermAppl("String", List(Var("x426157085"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\081\^I";
  "s"
))
-----------------------------------
===================================
2016-12-13T04:10:44.36+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:10:56.134+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x427281924"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "j";
  nil
))
-----------------------------------
===================================
2016-12-13T04:10:58.98+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x427372138"))), TermAppl("Cons", List(TermAppl("String", List(Var("x427372316"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T04:11:24.956+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x428393107"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  "\"\t"
))
-----------------------------------
===================================
2016-12-13T04:11:37.998+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x428891272"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("String", List(Var("x428891660"))), TermAppl("Cons", List(TermAppl("String", List(Var("x428890182"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    "\ \A"
  );
  "\247\956\n";
  ""
))
-----------------------------------
===================================
2016-12-13T04:11:52.13+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x429441690"))), TermAppl("Cons", List(TermAppl("String", List(Var("x429441868"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\	 \";
  ""
))
-----------------------------------
===================================
2016-12-13T04:12:40.619+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x431351279"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:14:09.818+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Uminus", List(TermAppl("And", List(TermAppl("String", List(Var("x434728598"))), TermAppl("String", List(Var("x434727526"))))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  - ("" & "\021\t\\\t\753");
  nil
))
-----------------------------------
===================================
2016-12-13T04:15:39.41+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x438149600"))), TermAppl("Cons", List(TermAppl("String", List(Var("x438149988"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  "g\""
))
-----------------------------------
===================================
2016-12-13T04:16:02.751+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:16:49.511+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:16:54.523+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x441081788"))), TermAppl("Cons", List(TermAppl("String", List(Var("x441082176"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\^K\ \\"\n\n\095\^N\n\933\n"
))
-----------------------------------
===================================
2016-12-13T04:16:59.706+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x441309176"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:17:42.682+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x442988643"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T04:17:42.688+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x442988803"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\

  
\";
  nil
))
-----------------------------------
===================================
2016-12-13T04:18:34.015+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:19:33.961+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x447273541"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T04:19:43.035+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:19:48.654+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x447862679"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  "\t\\"
))
-----------------------------------
===================================
2016-12-13T04:19:55.972+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x448133122"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\""
))
-----------------------------------
===================================
2016-12-13T04:19:57.299+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x448196988"))), TermAppl("Cons", List(TermAppl("String", List(Var("x448197376"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t";
  "\t\t"
))
-----------------------------------
===================================
2016-12-13T04:20:22.336+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x449170635"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T04:20:39.783+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x449868027"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\
\";
  (
  )
))
-----------------------------------
===================================
2016-12-13T04:20:45.794+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:20:50.195+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x450293929"))), TermAppl("Cons", List(TermAppl("String", List(Var("x450293541"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T04:20:50.921+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x450329060"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x450330328"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:21:03.339+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x450848630"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "6\"\t"
))
-----------------------------------
===================================
2016-12-13T04:21:17.515+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x451389360"))), TermAppl("Cons", List(TermAppl("String", List(Var("x451387672"))), TermAppl("Cons", List(TermAppl("String", List(Var("x451388972"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n\ 
\n\"\n\	\";
  "\
\";
  ""
))
-----------------------------------
===================================
2016-12-13T04:21:17.566+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x451391344"))), TermAppl("Cons", List(TermAppl("String", List(Var("x451392434"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t\t\^F\285";
  ""
))
-----------------------------------
===================================
2016-12-13T04:21:25.425+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:21:45.221+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:21:52.094+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T04:22:26.753+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:22:42.596+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x454754879"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\"\""
))
-----------------------------------
===================================
2016-12-13T04:23:54.65+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:23:57.336+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x457753235"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:24:39.197+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x459405833"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T04:24:48.318+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x459767111"))), TermAppl("Cons", List(TermAppl("String", List(Var("x459766723"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  "8\\"
))
-----------------------------------
===================================
2016-12-13T04:24:56.436+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x460097700"))), TermAppl("Cons", List(TermAppl("String", List(Var("x460097878"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T04:25:05.067+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x460448007"))), TermAppl("Cons", List(TermAppl("String", List(Var("x460448395"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\^E"
))
-----------------------------------
===================================
2016-12-13T04:25:41.908+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x461948382"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T04:26:01.33+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Leq", List(TermAppl("String", List(Var("x462731876"))), TermAppl("String", List(Var("x462731488"))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\n\"f" <= ""
))
-----------------------------------
===================================
2016-12-13T04:26:17.109+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x463335466"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:26:40.623+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:27:44.851+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x466757313"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^C";
  nil
))
-----------------------------------
===================================
2016-12-13T04:27:44.858+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T04:27:53.55+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T04:28:20.215+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x468206403"))), TermAppl("Cons", List(TermAppl("String", List(Var("x468206581"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\		\\n9"
))
-----------------------------------
===================================
2016-12-13T04:28:40.776+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x468986909"))), TermAppl("Cons", List(TermAppl("String", List(Var("x468987087"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t";
  ""
))
-----------------------------------
===================================
2016-12-13T04:29:14.981+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x470347160"))), TermAppl("Cons", List(TermAppl("String", List(Var("x470347338"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\\t\\";
  "\ \"
))
-----------------------------------
===================================
2016-12-13T04:30:44.648+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x473935693"))), TermAppl("Cons", List(TermAppl("String", List(Var("x473935871"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^Z\\%$";
  ""
))
-----------------------------------
===================================
2016-12-13T04:30:48.5+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x474084285"))), TermAppl("Cons", List(TermAppl("String", List(Var("x474084463"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\n"
))
-----------------------------------
===================================
2016-12-13T04:32:42.817+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T04:33:00.895+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Leq", List(TermAppl("String", List(Var("x479134064"))), TermAppl("String", List(Var("x479135432"))))), TermAppl("Cons", List(TermAppl("String", List(Var("x479135124"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\	\\\" <= "";
  "[\\"
))
-----------------------------------
===================================
2016-12-13T04:33:31.505+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x480372413"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "=\\\""
))
-----------------------------------
===================================
2016-12-13T04:35:51.11+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T04:35:51.128+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x485727604"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T04:35:57.946+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:36:12.355+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x486558983"))), TermAppl("Cons", List(TermAppl("String", List(Var("x486558595"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "_\n";
  ""
))
-----------------------------------
===================================
2016-12-13T04:36:47.791+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x487935234"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T04:37:07.192+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x488701536"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  nil
))
-----------------------------------
===================================
2016-12-13T04:38:16.656+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:38:55.454+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x492949443"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:39:00.803+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:39:06.647+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x493402125"))), TermAppl("Cons", List(TermAppl("String", List(Var("x493402513"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\^V"
))
-----------------------------------
===================================
2016-12-13T04:39:08.251+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x493466170"))), TermAppl("Cons", List(TermAppl("String", List(Var("x493465782"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "R";
  ""
))
-----------------------------------
===================================
2016-12-13T04:39:39.381+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x494686191"))), TermAppl("Cons", List(TermAppl("String", List(Var("x494686369"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\^C\^K"
))
-----------------------------------
===================================
2016-12-13T04:40:48.842+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x497452528"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:41:12.031+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:41:13.444+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x498430447"))), TermAppl("Cons", List(TermAppl("String", List(Var("x498430625"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T04:41:18.308+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x498620965"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\";
  nil
))
-----------------------------------
===================================
2016-12-13T04:41:28.748+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x499030857"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:41:37.894+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x499362858"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\"
))
-----------------------------------
===================================
2016-12-13T04:42:00.369+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x500237592"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "J3";
  (
  )
))
-----------------------------------
===================================
2016-12-13T04:42:06.457+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:42:13.215+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x500728214"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:42:19.332+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x500968375"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T04:42:41+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:42:51.544+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:43:55.298+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x504632870"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "I";
  (
  )
))
-----------------------------------
===================================
2016-12-13T04:43:58.298+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x504769739"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^N";
  nil
))
-----------------------------------
===================================
2016-12-13T04:44:43.574+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x506550434"))), TermAppl("Cons", List(TermAppl("String", List(Var("x506550612"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\\";
  ""
))
-----------------------------------
===================================
2016-12-13T04:44:47.015+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x506682698"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\^T"
))
-----------------------------------
===================================
2016-12-13T04:45:05.603+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T04:47:25.167+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x512932856"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T04:47:35.571+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x513337187"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^A";
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:47:35.759+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x513349241"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "E\
\\n"
))
-----------------------------------
===================================
2016-12-13T04:47:59.77+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x514237998"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "6{\""
))
-----------------------------------
===================================
2016-12-13T04:48:17.211+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x514934384"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T04:48:21.306+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x515079737"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\^V"
))
-----------------------------------
===================================
2016-12-13T04:48:21.312+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x515080303"))), TermAppl("Cons", List(TermAppl("String", List(Var("x515080481"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t";
  "\t\ \"
))
-----------------------------------
===================================
2016-12-13T04:49:04.551+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x516765450"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:49:07.249+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x516868043"))), TermAppl("Cons", List(TermAppl("String", List(Var("x516868221"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T04:50:04.542+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x519131675"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\268";
  nil
))
-----------------------------------
===================================
2016-12-13T04:50:14.77+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:50:26.412+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:50:52.34+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:51:32.791+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:51:41.936+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x522980514"))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    nil
  );
  (
    (
      ""
    )
  )
))
-----------------------------------
===================================
2016-12-13T04:51:43.787+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x523053752"))), TermAppl("Cons", List(TermAppl("String", List(Var("x523054140"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^U";
  "b\\"
))
-----------------------------------
===================================
2016-12-13T04:53:03.95+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x526353277"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\	\\320"
))
-----------------------------------
===================================
2016-12-13T04:54:04.698+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x528758028"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("String", List(Var("x528757850"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    "\\"
  );
  ""
))
-----------------------------------
===================================
2016-12-13T04:54:40.146+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x530178480"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t\^P"
))
-----------------------------------
===================================
2016-12-13T04:54:45.387+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:55:16.365+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x531585722"))), TermAppl("Cons", List(TermAppl("String", List(Var("x531585900"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T04:56:07.278+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:56:36.069+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:56:43.172+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x534863582"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  nil
))
-----------------------------------
===================================
2016-12-13T04:57:03.946+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x535633792"))), TermAppl("Cons", List(TermAppl("String", List(Var("x535634180"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\"\625*"
))
-----------------------------------
===================================
2016-12-13T04:57:29.703+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:57:32.467+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x536772198"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\^YK"
))
-----------------------------------
===================================
2016-12-13T04:57:44.931+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x537236423"))), TermAppl("Cons", List(TermAppl("String", List(Var("x537236811"))), TermAppl("Cons", List(TermAppl("String", List(Var("x537236989"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\689";
  "b";
  ""
))
-----------------------------------
===================================
2016-12-13T04:57:47.388+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x537327946"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:57:58.982+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x537799064"))), TermAppl("Cons", List(TermAppl("String", List(Var("x537799452"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\nN"
))
-----------------------------------
===================================
2016-12-13T04:58:09.206+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x538170892"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T04:58:26.486+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:58:46.9+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T04:59:01.965+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x540176954"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\776"
))
-----------------------------------
===================================
2016-12-13T04:59:15.027+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Leq", List(TermAppl("String", List(Var("x540653715"))), TermAppl("String", List(Var("x540654103"))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" <= "";
  nil
))
-----------------------------------
===================================
2016-12-13T04:59:43.594+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Seq", List(TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("String", List(Var("x541718724"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  ) >= (
  );
  "\
\\^A\n\t\t"
))
-----------------------------------
===================================
2016-12-13T05:00:31.512+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T05:00:44.331+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x544047897"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T05:00:54.701+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x544468162"))), TermAppl("Cons", List(TermAppl("String", List(Var("x544467774"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^X";
  "\807"
))
-----------------------------------
===================================
2016-12-13T05:01:00.431+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:01:03.339+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x544799974"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\""
))
-----------------------------------
===================================
2016-12-13T05:01:53.583+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Or", List(TermAppl("String", List(Var("x546676223"))), TermAppl("String", List(Var("x546674677"))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x546677523"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" | "";
  nil;
  "\^Y\ \\^Y";
  nil
))
-----------------------------------
===================================
2016-12-13T05:02:15.392+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x547484441"))), TermAppl("Cons", List(TermAppl("String", List(Var("x547481349"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x547483141"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  "";
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:02:32.888+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x548112694"))), TermAppl("Cons", List(TermAppl("String", List(Var("x548112872"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T05:02:43.024+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x548486080"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:02:58.149+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:03:00.918+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x549206283"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "8";
  nil
))
-----------------------------------
===================================
2016-12-13T05:03:07.048+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x549422943"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("String", List(Var("x549423121"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    "\
	\"
  );
  ""
))
-----------------------------------
===================================
2016-12-13T05:03:16.63+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x549832207"))), TermAppl("Cons", List(TermAppl("String", List(Var("x549832403"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\119";
  "\t"
))
-----------------------------------
===================================
2016-12-13T05:03:16.638+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x549832741"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:03:44.259+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x550930109"))), TermAppl("Cons", List(TermAppl("String", List(Var("x550930287"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "_\776";
  ""
))
-----------------------------------
===================================
2016-12-13T05:03:48.707+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("And", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil & nil
))
-----------------------------------
===================================
2016-12-13T05:03:53.887+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x551319672"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^O";
  nil
))
-----------------------------------
===================================
2016-12-13T05:04:01.698+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x551613121"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:04:24.89+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x552539309"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:04:45.608+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T05:05:41.026+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x555444404"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:06:05.549+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x556412964"))), TermAppl("Cons", List(TermAppl("String", List(Var("x556413142"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T05:06:05.571+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x556414004"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "F\^T";
  (
  )
))
-----------------------------------
===================================
2016-12-13T05:06:18.539+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x556904024"))), TermAppl("Cons", List(TermAppl("String", List(Var("x556905502"))), TermAppl("Cons", List(TermAppl("String", List(Var("x556905114"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\741\\";
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T05:06:28.635+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x557281593"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\558"
))
-----------------------------------
===================================
2016-12-13T05:06:31.237+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x557393401"))), TermAppl("Cons", List(TermAppl("String", List(Var("x557394281"))), TermAppl("Cons", List(TermAppl("String", List(Var("x557394669"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  "";
  "\n"
))
-----------------------------------
===================================
2016-12-13T05:06:43.355+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x557848573"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t\n"
))
-----------------------------------
===================================
2016-12-13T05:07:57.266+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x560819622"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:08:06.162+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x561191697"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t";
  (
  )
))
-----------------------------------
===================================
2016-12-13T05:08:12.595+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x561434096"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "M"
))
-----------------------------------
===================================
2016-12-13T05:08:17.655+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x561625841"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\";
  nil
))
-----------------------------------
===================================
2016-12-13T05:09:52.007+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x565112601"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:09:59.72+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x565416498"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t";
  nil
))
-----------------------------------
===================================
2016-12-13T05:10:33.29+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x566770895"))), TermAppl("Cons", List(TermAppl("String", List(Var("x566771073"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\\^U\n~";
  "\n"
))
-----------------------------------
===================================
2016-12-13T05:11:50.891+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x569769375"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:12:58.205+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x572440053"))), TermAppl("Cons", List(TermAppl("String", List(Var("x572440441"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\ \\767\^C";
  ""
))
-----------------------------------
===================================
2016-12-13T05:13:28.823+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x573628209"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "&\549";
  nil
))
-----------------------------------
===================================
2016-12-13T05:13:34.949+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:13:45.602+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x574311056"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\""
))
-----------------------------------
===================================
2016-12-13T05:14:35.057+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:14:40.034+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x576425845"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\^U"
))
-----------------------------------
===================================
2016-12-13T05:14:51.359+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:15:03.992+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x577304722"))), TermAppl("Cons", List(TermAppl("String", List(Var("x577304900"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T05:16:02.218+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x579535909"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\091"
))
-----------------------------------
===================================
2016-12-13T05:16:32.337+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x580710162"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\ 
			 	\\"Y\566\"";
  nil
))
-----------------------------------
===================================
2016-12-13T05:17:14.989+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x582306416"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:18:09.329+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x584437906"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "Z";
  nil
))
-----------------------------------
===================================
2016-12-13T05:18:14.271+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x584635931"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\\\"\t\"";
  nil
))
-----------------------------------
===================================
2016-12-13T05:18:15.037+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x584669455"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:18:35.677+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x585494106"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  "\t"
))
-----------------------------------
===================================
2016-12-13T05:19:43.433+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x588183121"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\^I"
))
-----------------------------------
===================================
2016-12-13T05:20:18.701+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:20:25.277+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x589843189"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\^M"
))
-----------------------------------
===================================
2016-12-13T05:20:38.292+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:21:07.265+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:21:11.147+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x591626606"))), TermAppl("Cons", List(TermAppl("String", List(Var("x591626784"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\n\t\t"
))
-----------------------------------
===================================
2016-12-13T05:21:17.792+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x591905204"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  nil
))
-----------------------------------
===================================
2016-12-13T05:21:22.926+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x592136108"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:21:26.691+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x592293702"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:21:37.568+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T05:22:39.536+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x595098730"))), TermAppl("Cons", List(TermAppl("String", List(Var("x595100312"))), TermAppl("Cons", List(TermAppl("String", List(Var("x595101612"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n\n";
  "\^V";
  "\^I\\\\";
  nil
))
-----------------------------------
===================================
2016-12-13T05:23:03.77+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x596036741"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x596036919"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\167\n\	\";
  nil;
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:23:03.778+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:23:31.769+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x597109414"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:24:16.762+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:24:17.781+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x598960290"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:24:17.787+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x598960450"))), TermAppl("Cons", List(TermAppl("String", List(Var("x598960628"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\	\\"\\";
  ""
))
-----------------------------------
===================================
2016-12-13T05:24:37.319+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:24:52.779+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:25:06.337+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x600835224"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t";
  nil
))
-----------------------------------
===================================
2016-12-13T05:25:06.386+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T05:25:11.888+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x601052509"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x601053777"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\
 \\\";
  nil;
  "\359\546"
))
-----------------------------------
===================================
2016-12-13T05:25:28.066+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:25:29.975+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x601793769"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:25:45.328+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Or", List(TermAppl("NilExp", List()), TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil | (
    nil
  );
  nil
))
-----------------------------------
===================================
2016-12-13T05:27:26.455+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x606420189"))), TermAppl("Cons", List(TermAppl("String", List(Var("x606419801"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\654Y"
))
-----------------------------------
===================================
2016-12-13T05:27:27.674+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x606485654"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  "\\"
))
-----------------------------------
===================================
2016-12-13T05:28:36.573+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x609174357"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:28:40.422+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x609337823"))), TermAppl("Cons", List(TermAppl("String", List(Var("x609338001"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n\^Q";
  ""
))
-----------------------------------
===================================
2016-12-13T05:29:25.121+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x611142725"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:29:43.542+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x611895588"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t";
  nil
))
-----------------------------------
===================================
2016-12-13T05:29:54.124+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Lt", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x612286727"))), TermAppl("Nil", List()))))))), TermAppl("String", List(Var("x612286531"))))), TermAppl("Cons", List(TermAppl("String", List(Var("x612284843"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    (
    );
    "\^F"
  ) < "";
  ","
))
-----------------------------------
===================================
2016-12-13T05:30:20.748+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x613292539"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:30:27.749+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x613570664"))), TermAppl("Cons", List(TermAppl("String", List(Var("x613570276"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T05:30:27.754+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:30:45.172+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x614302477"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))), TermAppl("Cons", List(TermAppl("String", List(Var("x614301597"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    "\323";
    nil
  );
  ""
))
-----------------------------------
===================================
2016-12-13T05:31:10.762+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x615279908"))), TermAppl("Cons", List(TermAppl("String", List(Var("x615279520"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\ \";
  "R"
))
-----------------------------------
===================================
2016-12-13T05:31:28.874+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x615992875"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\908\t";
  (
    nil;
    (
    )
  )
))
-----------------------------------
===================================
2016-12-13T05:31:57.347+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x617146374"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:31:59.07+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x617231476"))), TermAppl("Cons", List(TermAppl("String", List(Var("x617231864"))), TermAppl("Cons", List(TermAppl("String", List(Var("x617232744"))), TermAppl("Cons", List(TermAppl("String", List(Var("x617233132"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\\\";
  "\tC8\\";
  "\ \";
  ""
))
-----------------------------------
===================================
2016-12-13T05:31:59.076+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x617233470"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\

\Q\n"
))
-----------------------------------
===================================
2016-12-13T05:32:02.914+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x617381331"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:32:20.536+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x618119446"))), TermAppl("Cons", List(TermAppl("String", List(Var("x618119834"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^R";
  ""
))
-----------------------------------
===================================
2016-12-13T05:32:33.185+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x618586915"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:33:01.917+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x619777953"))), TermAppl("Cons", List(TermAppl("String", List(Var("x619778131"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T05:33:09.36+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x620065955"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\""
))
-----------------------------------
===================================
2016-12-13T05:33:13.946+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x620234406"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  nil
))
-----------------------------------
===================================
2016-12-13T05:33:28.451+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x620785196"))), TermAppl("Cons", List(TermAppl("String", List(Var("x620785584"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"\\\^Y\^R";
  ""
))
-----------------------------------
===================================
2016-12-13T05:33:50.856+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("And", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x621658746"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil & nil;
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:34:03.505+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:34:15.54+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:35:25.921+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x625422424"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T05:35:30.884+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x625622652"))), TermAppl("Cons", List(TermAppl("And", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil & nil
))
-----------------------------------
===================================
2016-12-13T05:36:08.933+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T05:36:25.799+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:36:30.648+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x627885020"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:36:32.673+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:36:44.769+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x628457713"))), TermAppl("Cons", List(TermAppl("String", List(Var("x628457325"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\t\	\"
))
-----------------------------------
===================================
2016-12-13T05:37:01.651+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x629077415"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  );
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:37:24.372+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x629957999"))), TermAppl("Cons", List(TermAppl("String", List(Var("x629958177"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\374\\\n";
  "\\\399\705"
))
-----------------------------------
===================================
2016-12-13T05:37:43.971+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Lt", List(TermAppl("Geq", List(TermAppl("String", List(Var("x630650609"))), TermAppl("String", List(Var("x630649621"))))), TermAppl("And", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))), TermAppl("Seq", List(TermAppl("Nil", List()))))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  ("" >= "") < ((
    (
    )
  ) & (
  ));
  nil
))
-----------------------------------
===================================
2016-12-13T05:38:18.317+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Lt", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil < nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:38:41.402+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T05:39:18.738+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Lt", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x634249490"))), TermAppl("Nil", List()))))), TermAppl("String", List(Var("x634249878"))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
    ""
  ) < "\\"
))
-----------------------------------
===================================
2016-12-13T05:39:27.855+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:39:35.259+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x634902727"))), TermAppl("Cons", List(TermAppl("String", List(Var("x634903115"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "}\

\";
  "\194"
))
-----------------------------------
===================================
2016-12-13T05:39:35.277+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x634904365"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\	
\\048";
  nil
))
-----------------------------------
===================================
2016-12-13T05:40:08.044+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:40:37.604+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:40:59.186+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x638185959"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:40:59.204+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x638187209"))), TermAppl("Cons", List(TermAppl("String", List(Var("x638187597"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n\828";
  "\"\078"
))
-----------------------------------
===================================
2016-12-13T05:41:37.911+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Or", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil | nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:42:20.353+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:42:31.169+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x641857653"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "&"
))
-----------------------------------
===================================
2016-12-13T05:43:00.739+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Lt", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil < nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:43:02.604+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x643037084"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^J";
  nil
))
-----------------------------------
===================================
2016-12-13T05:43:08.468+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x643246227"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x643246583"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\\285";
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:43:09.477+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x643293963"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:43:19.288+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x643692005"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil >= nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:43:29.488+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil >= nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:44:06.602+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:44:22.535+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x646172956"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T05:44:36.156+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x646690660"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\483"
))
-----------------------------------
===================================
2016-12-13T05:45:08.77+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x647915866"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "_t\n"
))
-----------------------------------
===================================
2016-12-13T05:45:22+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x648403623"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:45:37.315+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x648970801"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:47:05.758+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x652365625"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:47:14.293+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:47:21.379+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x652956555"))), TermAppl("Cons", List(TermAppl("String", List(Var("x652957435"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\^T";
  nil
))
-----------------------------------
===================================
2016-12-13T05:47:43.383+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x653878807"))), TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("String", List(Var("x653881386"))), TermAppl("String", List(Var("x653882458"))))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "" >= "";
  (
  )
))
-----------------------------------
===================================
2016-12-13T05:47:45.173+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x653951551"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:47:45.21+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x653954307"))), TermAppl("Cons", List(TermAppl("String", List(Var("x653953919"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "'"
))
-----------------------------------
===================================
2016-12-13T05:47:56.041+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x654416803"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  (
  )
))
-----------------------------------
===================================
2016-12-13T05:48:22.421+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x655457780"))), TermAppl("Cons", List(TermAppl("String", List(Var("x655457958"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\";
  ""
))
-----------------------------------
===================================
2016-12-13T05:48:22.478+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x655461785"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  nil
))
-----------------------------------
===================================
2016-12-13T05:48:22.765+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x655477990"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\	\";
  nil
))
-----------------------------------
===================================
2016-12-13T05:48:25.733+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x655597985"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:48:51.626+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x656568333"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\	\\
   \";
  nil
))
-----------------------------------
===================================
2016-12-13T05:48:57.588+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x656803669"))), TermAppl("Cons", List(TermAppl("String", List(Var("x656803847"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\615\		\";
  "\""
))
-----------------------------------
===================================
2016-12-13T05:48:59.042+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x656857650"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:49:12.262+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x657351102"))), TermAppl("Cons", List(TermAppl("String", List(Var("x657351280"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\t";
  nil
))
-----------------------------------
===================================
2016-12-13T05:49:20.846+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x657702423"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T05:49:49.378+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:49:51.259+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x658924293"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\n"
))
-----------------------------------
===================================
2016-12-13T05:50:05.085+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x659446410"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  (
  )
))
-----------------------------------
===================================
2016-12-13T05:50:14.548+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:50:53.733+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T05:50:54.195+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x661329767"))), TermAppl("Cons", List(TermAppl("String", List(Var("x661329945"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\	 	
  \";
  "n\t\\\""
))
-----------------------------------
===================================
2016-12-13T05:51:41.782+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x663166421"))), TermAppl("Cons", List(TermAppl("String", List(Var("x663167689"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x663167885"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^Q";
  "\t";
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T05:51:41.878+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:52:06.008+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x664100214"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\"
))
-----------------------------------
===================================
2016-12-13T05:52:11.497+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x664314439"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\"\\\t\122"
))
-----------------------------------
===================================
2016-12-13T05:52:27.673+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x664995442"))), TermAppl("Cons", List(TermAppl("String", List(Var("x664996920"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:52:36.701+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:53:05.942+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x666484741"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:53:08.885+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x666577959"))), TermAppl("Cons", List(TermAppl("String", List(Var("x666578137"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\
\\t";
  "\	\\670"
))
-----------------------------------
===================================
2016-12-13T05:53:14.392+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Or", List(TermAppl("String", List(Var("x666809228"))), TermAppl("String", List(Var("x666810300"))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "" | "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:53:28.971+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x667406864"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:54:00.604+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x668634960"))), TermAppl("Cons", List(TermAppl("String", List(Var("x668635348"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T05:54:00.728+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x668643017"))), TermAppl("Cons", List(TermAppl("String", List(Var("x668642629"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\429"
))
-----------------------------------
===================================
2016-12-13T05:55:08.983+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x671349817"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  nil
))
-----------------------------------
===================================
2016-12-13T05:55:25.966+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x672020457"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  "\t"
))
-----------------------------------
===================================
2016-12-13T05:56:05.264+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x673575902"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\472}";
  nil
))
-----------------------------------
===================================
2016-12-13T05:58:02.678+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:58:13.064+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x678560746"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t"
))
-----------------------------------
===================================
2016-12-13T05:58:19.363+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x678783267"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\^Jd";
  nil
))
-----------------------------------
===================================
2016-12-13T05:58:35.434+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x679387091"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T05:59:01.298+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x680372301"))), TermAppl("Cons", List(TermAppl("Eq", List(TermAppl("String", List(Var("x680373266"))), TermAppl("String", List(Var("x680373654"))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  "\315" = ""
))
-----------------------------------
===================================
2016-12-13T05:59:17.922+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T05:59:29.774+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:00:04.301+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x682793020"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x682793198"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t}";
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T06:00:12.616+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x683107662"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:00:22.242+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:00:27.632+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:00:33.654+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x683899751"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:00:51.184+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:00:58.936+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x684894998"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T06:01:44.905+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Lt", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil < nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:01:50.541+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:01:57.316+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x687112145"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:02:00.165+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x687236178"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T06:02:42.92+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x688809554"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\
\"
))
-----------------------------------
===================================
2016-12-13T06:03:15.264+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x690022328"))), TermAppl("Cons", List(TermAppl("String", List(Var("x690022506"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\\\\\\\";
  "\n"
))
-----------------------------------
===================================
2016-12-13T06:03:21.985+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x690296110"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T06:03:32.577+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x690703504"))), TermAppl("Cons", List(TermAppl("String", List(Var("x690703116"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\^H";
  nil
))
-----------------------------------
===================================
2016-12-13T06:03:32.596+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:04:23.18+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x692691837"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\843";
  nil
))
-----------------------------------
===================================
2016-12-13T06:04:25.516+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x692771689"))), TermAppl("Cons", List(TermAppl("String", List(Var("x692771301"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\\"\^Z";
  ""
))
-----------------------------------
===================================
2016-12-13T06:04:29.686+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x692946997"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "X\n\"\t\	 \";
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:04:31.349+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Neq", List(TermAppl("String", List(Var("x693019691"))), TermAppl("String", List(Var("x693020763"))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" <> "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:04:33.668+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x693096768"))), TermAppl("Cons", List(TermAppl("String", List(Var("x693097156"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\125";
  "\250\
	\"
))
-----------------------------------
===================================
2016-12-13T06:04:48.29+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x693639247"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\
\\t\^K"
))
-----------------------------------
===================================
2016-12-13T06:05:20.81+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x694865412"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\184\960";
  nil
))
-----------------------------------
===================================
2016-12-13T06:06:16.888+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x697051551"))), TermAppl("Cons", List(TermAppl("String", List(Var("x697051729"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T06:08:03.566+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x701188380"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\\\"
))
-----------------------------------
===================================
2016-12-13T06:08:11.081+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x701491933"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T06:08:19.943+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:08:41.36+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x702694784"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  "B"
))
-----------------------------------
===================================
2016-12-13T06:09:04.54+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x703555836"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\n"
))
-----------------------------------
===================================
2016-12-13T06:09:39.563+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x704897485"))), TermAppl("Cons", List(TermAppl("String", List(Var("x704897097"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\

\"
))
-----------------------------------
===================================
2016-12-13T06:10:21.219+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x706560846"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:10:25.928+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x706727750"))), TermAppl("Cons", List(TermAppl("String", List(Var("x706727928"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T06:10:35.393+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:10:41.06+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    nil
  );
  nil
))
-----------------------------------
===================================
2016-12-13T06:10:47.701+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:11:13.441+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x708495303"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\";
  nil
))
-----------------------------------
===================================
2016-12-13T06:11:30.277+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x709162740"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\526\411";
  nil
))
-----------------------------------
===================================
2016-12-13T06:11:35.294+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x709362354"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:11:41.726+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x709594627"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T06:11:56.136+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x710129267"))), TermAppl("Cons", List(TermAppl("String", List(Var("x710129851"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "";
  "\n\^I\\"
))
-----------------------------------
===================================
2016-12-13T06:12:01.67+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:12:13.801+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T06:12:30.892+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x711534752"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\010\"\n";
  nil
))
-----------------------------------
===================================
2016-12-13T06:12:36.221+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:12:47.555+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:13:05.143+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:13:58.708+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x714967055"))), TermAppl("Cons", List(TermAppl("String", List(Var("x714966667"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\616"
))
-----------------------------------
===================================
2016-12-13T06:14:17.782+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x715720389"))), TermAppl("Cons", List(TermAppl("String", List(Var("x715720777"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\t\848\t\079\ 

\\053@"
))
-----------------------------------
===================================
2016-12-13T06:14:22.421+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:15:13.711+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x717839361"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x717839717"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil;
  "\898"
))
-----------------------------------
===================================
2016-12-13T06:15:15.743+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:15:30.415+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x718495724"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\131\"\t\972\^Z"
))
-----------------------------------
===================================
2016-12-13T06:15:31.808+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:15:52.402+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x719364377"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:16:20.154+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:16:28.662+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x720839288"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\777\n\177";
  nil
))
-----------------------------------
===================================
2016-12-13T06:16:37.064+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("And", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil & nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:16:39.07+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x721261692"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\"\t\
\";
  nil
))
-----------------------------------
===================================
2016-12-13T06:16:39.075+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x721262030"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\ 


\2\^M";
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:17:06.351+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Neq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x722336742"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil <> nil;
  ""
))
-----------------------------------
===================================
2016-12-13T06:17:21.729+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x722921836"))), TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  nil >= nil
))
-----------------------------------
===================================
2016-12-13T06:17:41.167+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:18:07.194+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Leq", List(TermAppl("String", List(Var("x724671862"))), TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x724673198"))), TermAppl("Nil", List()))))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" <= (
    "\\\ \"
  );
  nil
))
-----------------------------------
===================================
2016-12-13T06:18:16.374+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x725019456"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
    (
      (
      )
    )
  );
  nil
))
-----------------------------------
===================================
2016-12-13T06:18:42.706+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x726080200"))), TermAppl("Cons", List(TermAppl("String", List(Var("x726079812"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:18:55.067+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x726533174"))), TermAppl("Cons", List(TermAppl("And", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\ 	\";
  nil & nil
))
-----------------------------------
===================================
2016-12-13T06:18:55.088+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x726535599"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:19:07.597+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:19:19.643+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x727552406"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil;
  "\""
))
-----------------------------------
===================================
2016-12-13T06:19:54.935+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Uminus", List(TermAppl("Eq", List(TermAppl("String", List(Var("x728924109"))), TermAppl("String", List(Var("x728924497"))))))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  - ("" = "");
  (
    (
    )
  )
))
-----------------------------------
===================================
2016-12-13T06:20:10.531+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:20:38.598+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x730636950"))), TermAppl("Cons", List(TermAppl("String", List(Var("x730637128"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\t\n";
  "\^H"
))
-----------------------------------
===================================
2016-12-13T06:20:51.423+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:20:51.428+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:20:53.091+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x731182534"))), TermAppl("Cons", List(TermAppl("String", List(Var("x731182146"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\t"
))
-----------------------------------
===================================
2016-12-13T06:21:19.133+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T06:21:49.303+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x733448183"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:21:56.073+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:22:03.991+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:22:03.996+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x734028981"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\
\";
  nil
))
-----------------------------------
===================================
2016-12-13T06:22:17.707+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x734595929"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t";
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:22:17.712+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x734596495"))), TermAppl("Cons", List(TermAppl("String", List(Var("x734596673"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "c"
))
-----------------------------------
===================================
2016-12-13T06:23:16.1+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:23:17.705+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Uminus", List(TermAppl("Eq", List(TermAppl("String", List(Var("x737018980"))), TermAppl("Let", List(TermAppl("Nil", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x737019563"))), TermAppl("Nil", List()))))))))), TermAppl("Cons", List(TermAppl("String", List(Var("x737014959"))), TermAppl("Cons", List(TermAppl("String", List(Var("x737017737"))), TermAppl("Nil", List()))))))))))),List(CDistinct(Declarations(TermAppl("s_body", List()), "All"))),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1)), CGDirectEdge(Var("x737019379"),Label('P'),TermAppl("s", List()))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  - ("\	 \" = let
   in
    "\"\"\n"
  end);
  "";
  "\\\"\	\"
))
-----------------------------------
===================================
2016-12-13T06:23:50.882+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:23:59.477+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x738638124"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t";
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:24:20.283+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x739429283"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
    (
    )
  )
))
-----------------------------------
===================================
2016-12-13T06:24:35.051+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x739971860"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T06:24:51.142+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x740618454"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\\		\"
))
-----------------------------------
===================================
2016-12-13T06:25:35.805+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x742393634"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\"\n\"\""
))
-----------------------------------
===================================
2016-12-13T06:25:39.841+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("And", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil & nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:25:42.698+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x742669372"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:26:46.43+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x745204369"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:27:11.966+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x746209517"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t\^V\t"
))
-----------------------------------
===================================
2016-12-13T06:27:58.918+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("And", List(TermAppl("String", List(Var("x747981806"))), TermAppl("String", List(Var("x747982194"))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" & "\"";
  nil
))
-----------------------------------
===================================
2016-12-13T06:28:00.687+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x748058927"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t"
))
-----------------------------------
===================================
2016-12-13T06:28:28.779+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x749192506"))), TermAppl("Cons", List(TermAppl("String", List(Var("x749192684"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\t"
))
-----------------------------------
===================================
2016-12-13T06:28:30.047+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:28:42.722+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:29:15.459+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x750987252"))), TermAppl("Cons", List(TermAppl("String", List(Var("x750987430"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\tY\^E\""
))
-----------------------------------
===================================
2016-12-13T06:29:55.474+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x752556253"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\^L"
))
-----------------------------------
===================================
2016-12-13T06:30:11.088+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x753115763"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\\108"
))
-----------------------------------
===================================
2016-12-13T06:30:22.355+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x753559195"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:30:25.074+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x753650922"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  nil
))
-----------------------------------
===================================
2016-12-13T06:30:27.421+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x753756612"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x753759180"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  nil;
  "\\\t"
))
-----------------------------------
===================================
2016-12-13T06:30:36.865+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x754133890"))), TermAppl("Cons", List(TermAppl("String", List(Var("x754134068"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T06:31:53.687+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:32:48.996+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x759345630"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x759346374"))), TermAppl("Nil", List()))))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  "\\";
  nil;
  "N"
))
-----------------------------------
===================================
2016-12-13T06:34:03.143+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x762312184"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T06:34:39.282+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x763711081"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T06:35:47.275+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x766487992"))), TermAppl("Cons", List(TermAppl("String", List(Var("x766487604"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\
\"
))
-----------------------------------
===================================
2016-12-13T06:35:51.448+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x766658453"))), TermAppl("Cons", List(TermAppl("Gt", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x766662179"))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t";
  nil > nil;
  (
    ""
  )
))
-----------------------------------
===================================
2016-12-13T06:36:15.093+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x767584189"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T06:36:18.435+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil >= nil
))
-----------------------------------
===================================
2016-12-13T06:36:40.41+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x768583027"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\
\"
))
-----------------------------------
===================================
2016-12-13T06:38:19.849+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x772506326"))), TermAppl("Cons", List(TermAppl("String", List(Var("x772507416"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\ \\n";
  "\n&";
  nil
))
-----------------------------------
===================================
2016-12-13T06:38:20.595+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x772535194"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x772537060"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\417";
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T06:39:00.132+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:39:38.013+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:40:01.018+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x776491218"))), TermAppl("Cons", List(TermAppl("String", List(Var("x776491396"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\\n\
 
	\\n";
  ""
))
-----------------------------------
===================================
2016-12-13T06:40:22.121+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x777310214"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\n"
))
-----------------------------------
===================================
2016-12-13T06:41:06.109+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:41:12.145+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x779255806"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:41:12.151+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:41:12.156+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x779257572"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:42:31.506+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x782326877"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t\\\226"
))
-----------------------------------
===================================
2016-12-13T06:42:31.556+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Neq", List(TermAppl("String", List(Var("x782328982"))), TermAppl("String", List(Var("x782327824"))))), TermAppl("Cons", List(TermAppl("String", List(Var("x782328674"))), TermAppl("Cons", List(TermAppl("String", List(Var("x782330268"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" <> "";
  "\t>\\\
\";
  "\"\^D\t";
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:42:51.172+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x783105099"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t\	\\070"
))
-----------------------------------
===================================
2016-12-13T06:43:02.333+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x783558456"))), TermAppl("Cons", List(TermAppl("String", List(Var("x783558844"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\	

\\^C\t~\	\\
	
\\\";
  ""
))
-----------------------------------
===================================
2016-12-13T06:43:15.752+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T06:43:25.388+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:43:44.273+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:44:25.729+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x786856529"))), TermAppl("Cons", List(TermAppl("String", List(Var("x786856917"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\n"
))
-----------------------------------
===================================
2016-12-13T06:44:45.61+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Gt", List(TermAppl("NilExp", List()), TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x787602937"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil > (
    "";
    nil
  );
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:44:53.671+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x787906302"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T06:45:12.936+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x788640534"))), TermAppl("Cons", List(TermAppl("String", List(Var("x788640146"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "A\n"
))
-----------------------------------
===================================
2016-12-13T06:45:16.687+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x788774161"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x788774695"))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\
\\543\^G\\\n\"\
\\  	\\356";
  nil;
  (
    ""
  )
))
-----------------------------------
===================================
2016-12-13T06:45:57.441+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x790399984"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\";
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:45:58.509+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:46:49.459+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x792375008"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\";
  nil
))
-----------------------------------
===================================
2016-12-13T06:46:58.946+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:47:02.419+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x792892698"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x792893086"))), TermAppl("Cons", List(TermAppl("String", List(Var("x792893264"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\
\";
  nil;
  "\469\^Q";
  "\873\n"
))
-----------------------------------
===================================
2016-12-13T06:47:14.241+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x793370938"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\^V\006";
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:47:15.77+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x793436608"))), TermAppl("Cons", List(TermAppl("String", List(Var("x793436786"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\864X"
))
-----------------------------------
===================================
2016-12-13T06:47:15.788+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x793437648"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:47:58.218+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:48:05.093+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x795296515"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:48:09.644+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x795471171"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:48:09.663+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x795472421"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\\\\ \";
  nil
))
-----------------------------------
===================================
2016-12-13T06:48:50.079+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x797024502"))), TermAppl("Cons", List(TermAppl("String", List(Var("x797024114"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T06:49:06.025+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:49:28.262+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:49:49.781+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x799345899"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    "[\^M"
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T06:50:08.165+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x800039992"))), TermAppl("Cons", List(TermAppl("String", List(Var("x800039604"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T06:50:19.618+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x800499861"))), TermAppl("Cons", List(TermAppl("String", List(Var("x800500249"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\^H"
))
-----------------------------------
===================================
2016-12-13T06:50:24.959+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x800713497"))), TermAppl("Cons", List(TermAppl("String", List(Var("x800713675"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T06:50:57.299+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x801994651"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x801994263"))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    ""
  );
  (
    "\^B"
  )
))
-----------------------------------
===================================
2016-12-13T06:51:20.516+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x802830844"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\\	  \";
  nil
))
-----------------------------------
===================================
2016-12-13T06:51:37.92+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:52:13.735+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T06:52:25.074+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x805394162"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n\242";
  nil
))
-----------------------------------
===================================
2016-12-13T06:52:26.579+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T06:52:37.787+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x805895065"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\\"
))
-----------------------------------
===================================
2016-12-13T06:53:22.344+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x807610085"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T06:53:41.481+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x808308919"))), TermAppl("Cons", List(TermAppl("String", List(Var("x808310187"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:53:43.985+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Lt", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil < nil;
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:54:00.873+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:55:07.491+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x811598370"))), TermAppl("Cons", List(TermAppl("String", List(Var("x811598758"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\\\\\^T\249"
))
-----------------------------------
===================================
2016-12-13T06:55:31.429+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x812522717"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x812523073"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "<";
  (
    "\

\";
    nil
  )
))
-----------------------------------
===================================
2016-12-13T06:56:04.938+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x813762152"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\t\n"
))
-----------------------------------
===================================
2016-12-13T06:56:15.257+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x814174554"))), TermAppl("Cons", List(TermAppl("String", List(Var("x814174732"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T06:56:35.582+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x814956987"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\n\n"
))
-----------------------------------
===================================
2016-12-13T06:57:11.543+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x816246687"))), TermAppl("Cons", List(TermAppl("String", List(Var("x816246883"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "E\^Yu\^U\"\t\t";
  "\753\""
))
-----------------------------------
===================================
2016-12-13T06:57:24.778+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Gt", List(TermAppl("String", List(Var("x816782550"))), TermAppl("String", List(Var("x816781478"))))), TermAppl("Cons", List(TermAppl("String", List(Var("x816782938"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\" > "";
  ""
))
-----------------------------------
===================================
2016-12-13T06:57:34.282+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x817155121"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T06:57:49.193+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x817695210"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T06:57:50.328+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x817744419"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x817744985"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n\	

\";
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T06:57:56.934+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Neq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil <> nil
))
-----------------------------------
===================================
2016-12-13T06:58:00.456+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Eq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil = nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:58:50.688+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:59:23.786+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x821283940"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    "\^T"
  );
  nil
))
-----------------------------------
===================================
2016-12-13T06:59:56.058+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T06:59:59.996+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x822649215"))), TermAppl("Cons", List(TermAppl("String", List(Var("x822649393"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "t"
))
-----------------------------------
===================================
2016-12-13T07:00:57.143+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x824795605"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "N\^M\\"
))
-----------------------------------
===================================
2016-12-13T07:01:26.876+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x825971305"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T07:01:44.317+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x826628416"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T07:03:08.912+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x829903697"))), TermAppl("Cons", List(TermAppl("String", List(Var("x829903875"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^E";
  "\^Y\n"
))
-----------------------------------
===================================
2016-12-13T07:03:14.439+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x830124152"))), TermAppl("Cons", List(TermAppl("String", List(Var("x830123764"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\\094\	\";
  ""
))
-----------------------------------
===================================
2016-12-13T07:03:20.731+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x830369105"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:03:26.439+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:03:34.041+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x830875232"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\ \"
))
-----------------------------------
===================================
2016-12-13T07:03:37.007+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x830998207"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^J\\";
  nil
))
-----------------------------------
===================================
2016-12-13T07:03:41.271+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x831151567"))), TermAppl("Cons", List(TermAppl("String", List(Var("x831151745"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\t\t\t";
  nil
))
-----------------------------------
===================================
2016-12-13T07:03:56.757+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:04:10.125+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x832271647"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "5"
))
-----------------------------------
===================================
2016-12-13T07:05:11.085+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x834528995"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^B";
  nil
))
-----------------------------------
===================================
2016-12-13T07:05:19.648+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x834850004"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x834850182"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil;
  "\""
))
-----------------------------------
===================================
2016-12-13T07:05:59.239+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x836298996"))), TermAppl("Cons", List(TermAppl("String", List(Var("x836297696"))), TermAppl("Cons", List(TermAppl("String", List(Var("x836299384"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\\";
  ""
))
-----------------------------------
===================================
2016-12-13T07:06:04.471+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Gt", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil > nil
))
-----------------------------------
===================================
2016-12-13T07:06:05.718+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x836547793"))), TermAppl("Cons", List(TermAppl("String", List(Var("x836547405"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "6\342"
))
-----------------------------------
===================================
2016-12-13T07:06:24.331+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:07:07.497+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x838948215"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:07:26.699+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x839657424"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T07:07:48.667+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x840494501"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\999"
))
-----------------------------------
===================================
2016-12-13T07:08:08.975+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x841312534"))), TermAppl("Cons", List(TermAppl("String", List(Var("x841312712"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  "\714\866\t"
))
-----------------------------------
===================================
2016-12-13T07:08:58.982+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x843237393"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "T\^S";
  nil
))
-----------------------------------
===================================
2016-12-13T07:09:42.072+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x844875729"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  nil
))
-----------------------------------
===================================
2016-12-13T07:09:43.779+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x844946992"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\
\"
))
-----------------------------------
===================================
2016-12-13T07:09:55.127+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x845402460"))), TermAppl("Cons", List(TermAppl("String", List(Var("x845402054"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "";
  "";
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:10:25.519+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x846527626"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:10:25.594+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Uminus", List(TermAppl("Uminus", List(TermAppl("Neq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))))))), TermAppl("Cons", List(TermAppl("String", List(Var("x846532601"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  - - (nil <> nil);
  ""
))
-----------------------------------
===================================
2016-12-13T07:10:25.612+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x846533851"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\ \\t"
))
-----------------------------------
===================================
2016-12-13T07:10:48.804+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x847455336"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\^B\t"
))
-----------------------------------
===================================
2016-12-13T07:11:07.769+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:11:15.047+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x848478640"))), TermAppl("Cons", List(TermAppl("String", List(Var("x848478818"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\"\t";
  "#\177"
))
-----------------------------------
===================================
2016-12-13T07:11:27.385+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("String", List(Var("x848937472"))), TermAppl("String", List(Var("x848937084"))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" >= "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:12:52.089+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    nil
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:13:16.891+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:13:19.078+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x853302246"))), TermAppl("Cons", List(TermAppl("String", List(Var("x853301858"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\\";
  "\""
))
-----------------------------------
===================================
2016-12-13T07:13:40.567+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:13:47.029+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x854448798"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:13:52.754+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x854662617"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t"
))
-----------------------------------
===================================
2016-12-13T07:13:55.712+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x854771850"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("String", List(Var("x854771672"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    ""
  );
  "\^L"
))
-----------------------------------
===================================
2016-12-13T07:14:05.083+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x855105925"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  nil
))
-----------------------------------
===================================
2016-12-13T07:14:10.86+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x855330022"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:14:40.986+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x856527642"))), TermAppl("Cons", List(TermAppl("String", List(Var("x856527820"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T07:14:49.92+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Leq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil <= nil
))
-----------------------------------
===================================
2016-12-13T07:14:51.566+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x856963574"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T07:15:38.52+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x858790415"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ";d"
))
-----------------------------------
===================================
2016-12-13T07:15:44.023+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:16:47.18+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:16:51.371+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:16:51.378+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x861556786"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:17:22.328+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x862754388"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "B\ \"
))
-----------------------------------
===================================
2016-12-13T07:17:27.334+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x862966279"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t"
))
-----------------------------------
===================================
2016-12-13T07:18:02.984+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:18:52.269+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x866284319"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T07:19:07.584+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x866887880"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\^O"
))
-----------------------------------
===================================
2016-12-13T07:19:07.589+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x866888428"))), TermAppl("Cons", List(TermAppl("String", List(Var("x866888606"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T07:19:08.348+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Uminus", List(TermAppl("Lt", List(TermAppl("String", List(Var("x866925479"))), TermAppl("String", List(Var("x866925867"))))))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  - ("\n" < "\	\\t");
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:19:46.607+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x868423741"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n5\t";
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:20:29.226+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x870157435"))), TermAppl("Cons", List(TermAppl("String", List(Var("x870157613"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T07:20:38.481+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:20:46.774+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x870834290"))), TermAppl("Cons", List(TermAppl("String", List(Var("x870834856"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T07:21:07.664+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:21:46.745+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x873166881"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^Ki";
  nil
))
-----------------------------------
===================================
2016-12-13T07:22:41.441+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x875212557"))), TermAppl("Cons", List(TermAppl("String", List(Var("x875212945"))), TermAppl("Cons", List(TermAppl("String", List(Var("x875213123"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\		\";
  "\"";
  ""
))
-----------------------------------
===================================
2016-12-13T07:23:27.966+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x877030720"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T07:24:07.044+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x878510933"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T07:24:10.431+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:24:54.37+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:25:06.413+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x880864725"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\\n\""
))
-----------------------------------
===================================
2016-12-13T07:25:19.867+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x881434264"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\	 \"
))
-----------------------------------
===================================
2016-12-13T07:25:41.224+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x882267298"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T07:25:45.563+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:26:20.214+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:26:21.536+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x883870813"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "V";
  nil
))
-----------------------------------
===================================
2016-12-13T07:27:50.623+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:27:55.641+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x887429949"))), TermAppl("Cons", List(TermAppl("String", List(Var("x887429561"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\"\458\^T"
))
-----------------------------------
===================================
2016-12-13T07:28:12.476+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:29:29.457+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x891006017"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  "\200"
))
-----------------------------------
===================================
2016-12-13T07:29:36.154+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x891268103"))), TermAppl("Cons", List(TermAppl("String", List(Var("x891268281"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\696";
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:30:01.89+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x892187229"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T07:30:01.913+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x892188867"))), TermAppl("Cons", List(TermAppl("String", List(Var("x892188479"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "c";
  "\n\n\258"
))
-----------------------------------
===================================
2016-12-13T07:30:33.304+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:30:52.979+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x894091277"))), TermAppl("Cons", List(TermAppl("String", List(Var("x894091665"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  "\"\^Z\271\n\ 
\"
))
-----------------------------------
===================================
2016-12-13T07:34:03.605+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x901486030"))), TermAppl("Cons", List(TermAppl("String", List(Var("x901486208"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"\"\t";
  "\\"
))
-----------------------------------
===================================
2016-12-13T07:34:35.595+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T07:34:42.679+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x903053673"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:34:52.609+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x903459641"))), TermAppl("Cons", List(TermAppl("String", List(Var("x903460029"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^L\"";
  "\
  \"
))
-----------------------------------
===================================
2016-12-13T07:35:11.907+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x904200009"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:35:25.362+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x904732241"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:36:02.667+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x906280677"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^E\t";
  nil
))
-----------------------------------
===================================
2016-12-13T07:36:22.974+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x907074033"))), TermAppl("Cons", List(TermAppl("String", List(Var("x907074421"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"\n\\n";
  ""
))
-----------------------------------
===================================
2016-12-13T07:36:35.203+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x907560097"))), TermAppl("Cons", List(TermAppl("String", List(Var("x907560275"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\n\"";
  "\t\t"
))
-----------------------------------
===================================
2016-12-13T07:36:57.79+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x908446276"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\";
  nil
))
-----------------------------------
===================================
2016-12-13T07:36:58.493+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x908482898"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t"
))
-----------------------------------
===================================
2016-12-13T07:37:02.308+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:37:51.126+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x910478040"))), TermAppl("Cons", List(TermAppl("String", List(Var("x910478218"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T07:38:14.871+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x911412467"))), TermAppl("Cons", List(TermAppl("String", List(Var("x911412645"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:38:46.987+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x912657645"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:39:12.603+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x913637990"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"\

\";
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:40:44.403+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x917278295"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    nil
  );
  nil;
  "\024\n"
))
-----------------------------------
===================================
2016-12-13T07:41:01.767+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:42:11.847+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x920680591"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T07:42:24.451+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x921167771"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "?\n\"\\"
))
-----------------------------------
===================================
2016-12-13T07:42:24.469+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x921168633"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\030F"
))
-----------------------------------
===================================
2016-12-13T07:42:44.859+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x921964785"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x921965351"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T07:42:44.879+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:42:48.821+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x922138980"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  "\	\"
))
-----------------------------------
===================================
2016-12-13T07:43:06.333+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:43:08.164+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:43:24.556+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x923565435"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:43:52.145+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x924694456"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\"\n\t"
))
-----------------------------------
===================================
2016-12-13T07:44:14.013+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x925558893"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^D";
  nil
))
-----------------------------------
===================================
2016-12-13T07:44:43.006+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x926660805"))), TermAppl("Cons", List(TermAppl("String", List(Var("x926661193"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "%";
  ""
))
-----------------------------------
===================================
2016-12-13T07:45:29.791+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x928539637"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\446\448";
  nil
))
-----------------------------------
===================================
2016-12-13T07:45:35.002+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x928747945"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T07:45:45.785+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x929138739"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:45:47.923+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x929228860"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "(";
  nil
))
-----------------------------------
===================================
2016-12-13T07:46:14.654+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:46:31.272+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x930930997"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\^V\ \\	\d"
))
-----------------------------------
===================================
2016-12-13T07:46:37.395+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x931176590"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:46:39.414+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:47:03.757+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x932208166"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:47:03.769+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x932208504"))), TermAppl("Cons", List(TermAppl("String", List(Var("x932208682"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x932209038"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\\\ \\^E\\\\";
  "";
  nil;
  "m"
))
-----------------------------------
===================================
2016-12-13T07:47:05.657+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x932280737"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"L";
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:47:14.727+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x932675801"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  );
  (
  );
  "\""
))
-----------------------------------
===================================
2016-12-13T07:47:28.404+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:47:47.221+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x933931949"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  nil
))
-----------------------------------
===================================
2016-12-13T07:47:58.106+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x934341589"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "'\\D\t\ 	\\\";
  nil
))
-----------------------------------
===================================
2016-12-13T07:48:12.525+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:48:22.35+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x935306646"))), TermAppl("Cons", List(TermAppl("String", List(Var("x935305346"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  "\921\n\
 	
\"
))
-----------------------------------
===================================
2016-12-13T07:48:27.004+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x935511442"))), TermAppl("Cons", List(TermAppl("String", List(Var("x935511054"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T07:48:43.459+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x936112170"))), TermAppl("Cons", List(TermAppl("String", List(Var("x936112558"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T07:49:20.776+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x937548857"))), TermAppl("Cons", List(TermAppl("String", List(Var("x937549035"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\288";
  ""
))
-----------------------------------
===================================
2016-12-13T07:50:07.512+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x939345136"))), TermAppl("Cons", List(TermAppl("String", List(Var("x939345314"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\663"
))
-----------------------------------
===================================
2016-12-13T07:50:23.61+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x939961421"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:51:08.642+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:51:29.163+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x942399864"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\^KD"
))
-----------------------------------
===================================
2016-12-13T07:52:00.291+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x943572936"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^E\	 
\\n\"\^P";
  nil
))
-----------------------------------
===================================
2016-12-13T07:52:32.308+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x944838688"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T07:52:48.206+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x945435520"))), TermAppl("Cons", List(TermAppl("String", List(Var("x945435698"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "g\\\^D";
  ""
))
-----------------------------------
===================================
2016-12-13T07:52:48.241+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:53:14.656+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x946486962"))), TermAppl("Cons", List(TermAppl("Leq", List(TermAppl("String", List(Var("x946488315"))), TermAppl("String", List(Var("x946487927"))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "" <= "\\u\t\"D"
))
-----------------------------------
===================================
2016-12-13T07:54:31.491+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x949612120"))), TermAppl("Cons", List(TermAppl("Neq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil <> nil
))
-----------------------------------
===================================
2016-12-13T07:55:05.913+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x950944436"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "a";
  nil
))
-----------------------------------
===================================
2016-12-13T07:55:19.193+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:55:22.892+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x951586450"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:55:56.581+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x952874612"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  nil;
  nil >= nil
))
-----------------------------------
===================================
2016-12-13T07:55:59.714+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:56:28.798+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    nil
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T07:56:51.766+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x955076789"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x955077145"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\";
  nil;
  "\""
))
-----------------------------------
===================================
2016-12-13T07:56:59.794+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x955402268"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:57:20.833+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x956228469"))), TermAppl("Cons", List(TermAppl("String", List(Var("x956228647"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\\";
  "r"
))
-----------------------------------
===================================
2016-12-13T07:58:01.418+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x957789290"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:58:07.58+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:58:17.684+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T07:58:17.725+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x958441734"))), TermAppl("Cons", List(TermAppl("String", List(Var("x958442614"))), TermAppl("Cons", List(TermAppl("And", List(TermAppl("String", List(Var("x958444177"))), TermAppl("String", List(Var("x958443789"))))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\	
\";
  "^\n\ \\"" & ""
))
-----------------------------------
===================================
2016-12-13T07:58:48.073+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x959632657"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\"\253\123"
))
-----------------------------------
===================================
2016-12-13T07:59:25.382+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x961095713"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T07:59:52.106+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x962149574"))), TermAppl("Cons", List(TermAppl("String", List(Var("x962149186"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\n"
))
-----------------------------------
===================================
2016-12-13T08:00:14.749+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x962961548"))), TermAppl("Cons", List(TermAppl("String", List(Var("x962961160"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\
	 	 	

\";
  ""
))
-----------------------------------
===================================
2016-12-13T08:00:23.867+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x963322783"))), TermAppl("Cons", List(TermAppl("String", List(Var("x963323171"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^S\tX";
  ""
))
-----------------------------------
===================================
2016-12-13T08:00:38.805+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x963877130"))), TermAppl("Cons", List(TermAppl("String", List(Var("x963877308"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"\^J\"\t";
  "\  
\\^K"
))
-----------------------------------
===================================
2016-12-13T08:01:10.172+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x965090473"))), TermAppl("Cons", List(TermAppl("String", List(Var("x965090085"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  ""
))
-----------------------------------
===================================
2016-12-13T08:01:15.088+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x965287786"))), TermAppl("Cons", List(TermAppl("Uminus", List(TermAppl("Uminus", List(TermAppl("Lt", List(TermAppl("String", List(Var("x965288094"))), TermAppl("String", List(Var("x965286726"))))))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  - - ("" < "")
))
-----------------------------------
===================================
2016-12-13T08:01:16.348+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:01:40.741+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    nil
  );
  nil
))
-----------------------------------
===================================
2016-12-13T08:01:50.829+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:02:16.34+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x967744721"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T08:02:42.668+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x968748873"))), TermAppl("Cons", List(TermAppl("String", List(Var("x968749051"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\t\t\ 
\"
))
-----------------------------------
===================================
2016-12-13T08:03:47.327+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:04:07.277+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x972019605"))), TermAppl("Cons", List(TermAppl("String", List(Var("x972019783"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\tr\n\t\	\"
))
-----------------------------------
===================================
2016-12-13T08:04:07.288+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x972020317"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  );
  "\^P"
))
-----------------------------------
===================================
2016-12-13T08:04:10.727+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T08:04:16.225+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x972353344"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\n\""
))
-----------------------------------
===================================
2016-12-13T08:04:20.978+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x972538111"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "_\
	\";
  nil
))
-----------------------------------
===================================
2016-12-13T08:04:26.868+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x972761754"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t";
  (
  )
))
-----------------------------------
===================================
2016-12-13T08:05:19.434+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x974863042"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\^U"
))
-----------------------------------
===================================
2016-12-13T08:06:17.405+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Eq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil = nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T08:06:31.116+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T08:06:31.144+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T08:06:39.863+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x977991920"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x977992276"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
    "";
    nil
  )
))
-----------------------------------
===================================
2016-12-13T08:06:41.661+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x978074689"))), TermAppl("Cons", List(TermAppl("String", List(Var("x978075077"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  "<\n\n"
))
-----------------------------------
===================================
2016-12-13T08:07:01.255+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x978881832"))), TermAppl("Nil", List()))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
    ""
  )
))
-----------------------------------
===================================
2016-12-13T08:07:42.613+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x980463412"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\^R"
))
-----------------------------------
===================================
2016-12-13T08:07:55.31+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x980969350"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
  )
))
-----------------------------------
===================================
2016-12-13T08:08:36.644+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x982572434"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\688-\^X\ \"
))
-----------------------------------
===================================
2016-12-13T08:08:57.09+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x983374738"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t\\"
))
-----------------------------------
===================================
2016-12-13T08:09:05.526+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x983724354"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T08:09:18.336+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x984231702"))), TermAppl("Cons", List(TermAppl("String", List(Var("x984231880"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\tU\n\t\	\\t"
))
-----------------------------------
===================================
2016-12-13T08:09:22.489+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x984389269"))), TermAppl("Cons", List(TermAppl("String", List(Var("x984389447"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^J";
  "<"
))
-----------------------------------
===================================
2016-12-13T08:09:22.509+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x984390697"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T08:09:37.991+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:10:00.363+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:10:23.721+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x986817954"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("Neq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    "\828"
  );
  nil <> nil
))
-----------------------------------
===================================
2016-12-13T08:10:27.666+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:10:31.83+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x987130422"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:10:33.562+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x987203685"))), TermAppl("Cons", List(TermAppl("String", List(Var("x987204073"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T08:10:46.925+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:11:11.56+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Leq", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Seq", List(TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("String", List(Var("x988693481"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  ) <= (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T08:12:27.62+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:13:21.266+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:13:25.058+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:13:41.456+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x994597346"))), TermAppl("Cons", List(TermAppl("String", List(Var("x994593656"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\"}";
  "";
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:13:51.44+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:13:56.922+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x995247959"))), TermAppl("Cons", List(TermAppl("String", List(Var("x995248137"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n";
  "\n"
))
-----------------------------------
===================================
2016-12-13T08:14:37.164+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:14:53.321+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Eq", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Seq", List(TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  ) = (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T08:14:56.632+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x997619812"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T08:15:09.58+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x998130887"))), TermAppl("Cons", List(TermAppl("String", List(Var("x998132575"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "Q";
  "O"
))
-----------------------------------
===================================
2016-12-13T08:15:38.364+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x999248421"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\
\"
))
-----------------------------------
===================================
2016-12-13T08:15:43.86+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x999497056"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\174\"";
  nil
))
-----------------------------------
===================================
2016-12-13T08:15:55.024+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T08:16:08.212+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Or", List(TermAppl("String", List(Var("x1000412652"))), TermAppl("String", List(Var("x1000412264"))))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  "" | "\949"
))
-----------------------------------
===================================
2016-12-13T08:16:08.217+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:16:18.943+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1000848476"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T08:18:40.793+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1006280071"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1006280459"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\nJ\^W\\";
  "\ 	\\n"
))
-----------------------------------
===================================
2016-12-13T08:18:56.897+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:20:08.454+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1009536562"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T08:20:22.056+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1010039579"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1010039191"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T08:20:23.971+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1010118078"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1010118466"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\669\520";
  ""
))
-----------------------------------
===================================
2016-12-13T08:20:45.624+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1010977460"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\"\n\\\"\^U";
  (
  )
))
-----------------------------------
===================================
2016-12-13T08:21:12.969+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1012018816"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\"
))
-----------------------------------
===================================
2016-12-13T08:21:12.989+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:21:40.616+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1013105791"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T08:21:47.113+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1013346007"))), TermAppl("Cons", List(TermAppl("And", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\n";
  nil & nil
))
-----------------------------------
===================================
2016-12-13T08:22:04.717+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:23:10.144+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1016532413"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1016532591"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\
\";
  "\\"
))
-----------------------------------
===================================
2016-12-13T08:23:57.945+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1017959482"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1017960572"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\580";
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T08:24:27.432+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1018992033"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"\"\	\\\";
  nil
))
-----------------------------------
===================================
2016-12-13T08:25:23.352+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1021037473"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T08:27:29.114+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1025700196"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1025701076"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1025701464"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "";
  "\"\^G\046\^M"
))
-----------------------------------
===================================
2016-12-13T08:27:33.077+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1025832777"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1025832389"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\383\\"
))
-----------------------------------
===================================
2016-12-13T08:27:37.362+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Lt", List(TermAppl("String", List(Var("x1025986726"))), TermAppl("String", List(Var("x1025986338"))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "" < "\t\871"
))
-----------------------------------
===================================
2016-12-13T08:28:26.226+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:28:27.479+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1027740184"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    "i"
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T08:29:00.559+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1028974214"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\	



\\"\\"
))
-----------------------------------
===================================
2016-12-13T08:29:33.049+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1030126023"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x1030126589"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\ \";
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T08:30:20.419+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1031915014"))), TermAppl("Cons", List(TermAppl("Lt", List(TermAppl("String", List(Var("x1031915979"))), TermAppl("String", List(Var("x1031916367"))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\n\		 
\" < "\\"
))
-----------------------------------
===================================
2016-12-13T08:30:28.047+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1032218321"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\n\"\\"
))
-----------------------------------
===================================
2016-12-13T08:30:42.302+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1032722298"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T08:31:08.151+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:31:15.139+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
    nil;
    nil
  )
))
-----------------------------------
===================================
2016-12-13T08:31:25.131+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:31:26.778+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1034247609"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  nil
))
-----------------------------------
===================================
2016-12-13T08:32:18.444+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1036173083"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1036173261"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T08:32:59.654+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:33:35.886+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:33:47.582+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Or", List(TermAppl("String", List(Var("x1039320849"))), TermAppl("String", List(Var("x1039321237"))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\756" | "\739";
  nil
))
-----------------------------------
===================================
2016-12-13T08:34:11.283+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1040145068"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1040143978"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\ 	\S\^A";
  "\"\t";
  nil
))
-----------------------------------
===================================
2016-12-13T08:34:24.072+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1040601979"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1040602157"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T08:35:09.016+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:35:25.364+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1042837690"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1042837868"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\\D\t"
))
-----------------------------------
===================================
2016-12-13T08:35:44.475+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T08:35:59.016+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1044050930"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  "\\\		\\t\t"
))
-----------------------------------
===================================
2016-12-13T08:36:09.613+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1044443006"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\795"
))
-----------------------------------
===================================
2016-12-13T08:36:42.776+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1045686818"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T08:37:04.118+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1046449187"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "7\242";
  (
  )
))
-----------------------------------
===================================
2016-12-13T08:37:04.123+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:37:06.901+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1046563382"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T08:37:28.802+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1047333785"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T08:38:04.071+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1048657736"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1048657914"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\247\""
))
-----------------------------------
===================================
2016-12-13T08:38:11.238+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:38:19.041+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1049184672"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:38:26.835+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1049483140"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1049484618"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T08:39:23.126+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1051543596"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\

\";
  nil
))
-----------------------------------
===================================
2016-12-13T08:39:38.609+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1052096185"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T08:39:44.813+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Or", List(TermAppl("String", List(Var("x1052337801"))), TermAppl("String", List(Var("x1052337413"))))), TermAppl("Cons", List(TermAppl("String", List(Var("x1052336170"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" | "";
  ""
))
-----------------------------------
===================================
2016-12-13T08:40:08.243+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:40:52.99+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:41:20.494+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1055825260"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T08:41:43.182+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1056652599"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\	\c\\"
))
-----------------------------------
===================================
2016-12-13T08:42:21.599+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1058143362"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n\	\";
  nil
))
-----------------------------------
===================================
2016-12-13T08:42:22.965+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1058185977"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T08:43:23.821+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1060427947"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T08:43:28.331+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:43:53.502+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1061491952"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T08:44:46.632+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1063496167"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1063496555"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^N\^V\^U";
  ""
))
-----------------------------------
===================================
2016-12-13T08:45:24.851+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1064984192"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1064984370"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\775\^X"
))
-----------------------------------
===================================
2016-12-13T08:45:34.432+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1065374538"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1065374926"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^U\t\525";
  ""
))
-----------------------------------
===================================
2016-12-13T08:45:53.993+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Lt", List(TermAppl("String", List(Var("x1066127358"))), TermAppl("String", List(Var("x1066126970"))))), TermAppl("Cons", List(TermAppl("String", List(Var("x1066125795"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" < "\\\085I";
  ""
))
-----------------------------------
===================================
2016-12-13T08:46:05.098+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1066562033"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\""
))
-----------------------------------
===================================
2016-12-13T08:46:32.236+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Gt", List(TermAppl("String", List(Var("x1067622118"))), TermAppl("String", List(Var("x1067620362"))))), TermAppl("Cons", List(TermAppl("String", List(Var("x1067623418"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "" > "j\^W";
  ""
))
-----------------------------------
===================================
2016-12-13T08:46:41.577+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Or", List(TermAppl("String", List(Var("x1067997763"))), TermAppl("String", List(Var("x1067997375"))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "" | "\
 
 \";
  nil
))
-----------------------------------
===================================
2016-12-13T08:46:45.336+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1068118602"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\267\^I\165\	
				\";
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:47:09.845+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1068986218"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\t"
))
-----------------------------------
===================================
2016-12-13T08:47:09.852+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1068986944"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T08:47:16.488+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1069256525"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T08:47:17.557+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:47:39.159+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1070140726"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "A"
))
-----------------------------------
===================================
2016-12-13T08:48:10.564+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1071408314"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1071407926"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\";
  "\t}"
))
-----------------------------------
===================================
2016-12-13T08:48:28.395+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:48:33.116+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1072310599"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T08:48:55.87+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Leq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x1073227713"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil <= nil;
  "\""
))
-----------------------------------
===================================
2016-12-13T08:50:12.048+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:50:17.931+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1076420561"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1076420173"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T08:50:31.396+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T08:51:12.565+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1078533612"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  (
  )
))
-----------------------------------
===================================
2016-12-13T08:51:12.624+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x1078537540"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T08:52:45.105+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1081171826"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T08:52:53.687+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1081449233"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\n\n\^D";
  nil
))
-----------------------------------
===================================
2016-12-13T08:53:24.675+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T08:53:54.862+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1082907019"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T08:54:09.723+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:54:13.816+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1083579211"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T08:54:26.705+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("String", List(Var("x1084082649"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    nil
  );
  "\509\^L\^I"
))
-----------------------------------
===================================
2016-12-13T08:54:43.645+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x1084679131"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  "\


\\"\  \"
))
-----------------------------------
===================================
2016-12-13T08:54:47.508+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1084795436"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("Geq", List(TermAppl("String", List(Var("x1084794870"))), TermAppl("String", List(Var("x1084795258"))))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    ""
  );
  "" >= ""
))
-----------------------------------
===================================
2016-12-13T08:54:51.348+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:54:51.385+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1084896742"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\592";
  nil
))
-----------------------------------
===================================
2016-12-13T08:55:57.459+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1086960332"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1086960510"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\\\		
\";
  ""
))
-----------------------------------
===================================
2016-12-13T08:56:11.187+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T08:56:23.941+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1087822852"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T08:56:37.77+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Eq", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x1088352879"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil = nil;
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T08:57:49.313+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1090694965"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1090694577"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  ""
))
-----------------------------------
===================================
2016-12-13T08:57:58.585+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    nil;
    nil
  );
  nil
))
-----------------------------------
===================================
2016-12-13T08:58:01.776+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:58:03.802+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1091189662"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1091189274"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\
  	\\"a\^X";
  ""
))
-----------------------------------
===================================
2016-12-13T08:58:07.162+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1091321516"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T08:58:59.554+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T08:58:59.791+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1093216988"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1093217166"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1093217344"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1093217522"))), TermAppl("Nil", List()))))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^O\	\";
  "";
  "y\\\n\\\n\^L";
  "\\"
))
-----------------------------------
===================================
2016-12-13T08:59:10.494+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1093565171"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\	\";
  nil
))
-----------------------------------
===================================
2016-12-13T09:00:03.986+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1095208675"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  nil
))
-----------------------------------
===================================
2016-12-13T09:00:17.336+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1095639422"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  nil
))
-----------------------------------
===================================
2016-12-13T09:00:19.615+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1095722912"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1095723090"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  ""
))
-----------------------------------
===================================
2016-12-13T09:00:40.826+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1096445994"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T09:00:42.281+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1096499574"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T09:00:58.834+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1096904146"))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^K";
  (
    (
    )
  );
  nil
))
-----------------------------------
===================================
2016-12-13T09:00:59.56+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T09:01:18.861+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x1097580407"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T09:01:18.886+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  );
  nil
))
-----------------------------------
===================================
2016-12-13T09:01:22.529+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1097708830"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T09:01:22.953+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1097726065"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1097726243"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t";
  "d\ 	\"
))
-----------------------------------
===================================
2016-12-13T09:01:29.234+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1097921437"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1097921615"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^H";
  "\\\\\n\t"
))
-----------------------------------
===================================
2016-12-13T09:01:41.902+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1098267964"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  "\\\683"
))
-----------------------------------
===================================
2016-12-13T09:01:43.068+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1098306867"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1098306479"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  ""
))
-----------------------------------
===================================
2016-12-13T09:02:05.452+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1099113201"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("And", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    ""
  );
  nil & nil
))
-----------------------------------
===================================
2016-12-13T09:02:33.326+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1100043429"))), TermAppl("Cons", List(TermAppl("String", List(Var("x1100043607"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "";
  "\\\728\	\\ \"
))
-----------------------------------
===================================
2016-12-13T09:05:14.525+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T09:06:16.705+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1105774669"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1105775025"))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\ 	\\\";
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T09:06:34.346+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Leq", List(TermAppl("String", List(Var("x1106322803"))), TermAppl("String", List(Var("x1106322415"))))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\	\" <= "\\O";
  nil
))
-----------------------------------
===================================
2016-12-13T09:07:12.092+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  (
  )
))
-----------------------------------
===================================
2016-12-13T09:08:19.343+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Cons", List(TermAppl("String", List(Var("x1109692494"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
  );
  ""
))
-----------------------------------
===================================
2016-12-13T09:08:24.546+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("And", List(TermAppl("NilExp", List()), TermAppl("NilExp", List()))), TermAppl("Nil", List()))))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil;
  nil & nil
))
-----------------------------------
===================================
2016-12-13T09:09:02.21+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1111064414"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\^D";
  nil
))
-----------------------------------
===================================
2016-12-13T09:09:32.644+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("UNIT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1112007838"))), TermAppl("Nil", List()))))), TermAppl("Cons", List(TermAppl("Seq", List(TermAppl("Nil", List()))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  (
    "\^Tv"
  );
  (
  )
))
-----------------------------------
===================================
2016-12-13T09:09:44.256+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1112367729"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\"";
  nil
))
-----------------------------------
===================================
2016-12-13T09:10:08.22+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1113120803"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T09:10:08.243+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1113122053"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T09:10:42.689+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T09:11:29.66+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  nil
))
-----------------------------------
===================================
2016-12-13T09:11:29.682+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("String", List(Var("x1115193209"))), TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  "\t\855";
  nil
))
-----------------------------------
===================================
2016-12-13T09:12:18.265+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Seq", List(TermAppl("Cons", List(TermAppl("NilExp", List()), TermAppl("Cons", List(TermAppl("String", List(Var("x1116844160"))), TermAppl("Nil", List()))))))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),(
  nil;
  ""
))
-----------------------------------
===================================
2016-12-13T10:39:58.228+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Int", List(Var("x158"))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),67)
-----------------------------------
===================================
2016-12-13T10:41:02.261+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("String", List(Var("x1704"))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),"\803\\")
-----------------------------------
===================================
2016-12-13T10:41:03.306+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Int", List(Var("x1771"))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),0)
-----------------------------------
===================================
2016-12-13T11:45:37.983+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Int", List(Var("x158"))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),08)
-----------------------------------
===================================
2016-12-13T11:45:38.325+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Int", List(Var("x323"))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),10)
-----------------------------------
===================================
2016-12-13T11:45:51.356+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("String", List(Var("x2328"))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),"\"U")
-----------------------------------
===================================
2016-12-13T11:45:51.421+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Int", List(Var("x2395"))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),37)
-----------------------------------
===================================
2016-12-13T11:45:51.492+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("NilExp", List()))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),nil)
-----------------------------------
===================================
2016-12-13T11:45:51.564+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("NilExp", List()))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),nil)
-----------------------------------
===================================
2016-12-13T11:46:22.396+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("String", List(Var("x8754"))))),List(),List(CGDecl(Var("s"),ConcreteName("Type", "int", -1)), CGDecl(Var("s"),ConcreteName("Type", "string", -1)), CGDecl(Var("s"),ConcreteName("Var", "print", -1)), CGDecl(Var("s"),ConcreteName("Var", "flush", -1)), CGDecl(Var("s"),ConcreteName("Var", "getchar", -1)), CGDecl(Var("s"),ConcreteName("Var", "ord", -1)), CGDecl(Var("s"),ConcreteName("Var", "chr", -1)), CGDecl(Var("s"),ConcreteName("Var", "size", -1)), CGDecl(Var("s"),ConcreteName("Var", "substring", -1)), CGDecl(Var("s"),ConcreteName("Var", "concat", -1)), CGDecl(Var("s"),ConcreteName("Var", "not", -1)), CGDecl(Var("s"),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),"")
-----------------------------------
===================================
2016-12-13T12:06:37.794+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("STRING", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("String", List(Var("x251"))))),List(),List(CGDecl(TermAppl("s", List()),ConcreteName("Type", "int", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Type", "string", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "print", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "flush", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "getchar", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "ord", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "chr", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "size", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "substring", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "concat", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "not", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),"")
-----------------------------------
===================================
2016-12-13T12:06:51.077+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(Var("x415")), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Var", List(Var("x413"))))),List(),List(CGDecl(TermAppl("s", List()),ConcreteName("Type", "int", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Type", "string", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "print", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "flush", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "getchar", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "ord", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "chr", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "size", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "substring", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "concat", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "not", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "exit", -1)), CGRef(SymbolicName("Var", "x413"),TermAppl("s", List()))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map(Tuple2(SymbolicName("Var", "x413"), ConcreteName("Var", "flush", -1)))),SubtypeRelation(List()),List())),flush)
-----------------------------------
===================================
2016-12-13T12:06:56.754+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(Var("x575")), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Var", List(Var("x573"))))),List(),List(CGDecl(TermAppl("s", List()),ConcreteName("Type", "int", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Type", "string", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "print", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "flush", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "getchar", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "ord", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "chr", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "size", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "substring", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "concat", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "not", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "exit", -1)), CGRef(SymbolicName("Var", "x573"),TermAppl("s", List()))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map(Tuple2(SymbolicName("Var", "x573"), ConcreteName("Var", "concat", -1)))),SubtypeRelation(List()),List())),concat)
-----------------------------------
===================================
2016-12-13T12:07:00.627+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("NilExp", List()))),List(),List(CGDecl(TermAppl("s", List()),ConcreteName("Type", "int", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Type", "string", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "print", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "flush", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "getchar", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "ord", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "chr", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "size", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "substring", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "concat", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "not", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),nil)
-----------------------------------
===================================
2016-12-13T12:11:08.436+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(Var("x255")), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Var", List(Var("x253"))))),List(),List(CGDecl(TermAppl("s", List()),ConcreteName("Type", "int", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Type", "string", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "print", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "flush", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "getchar", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "ord", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "chr", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "size", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "substring", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "concat", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "not", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "exit", -1)), CGRef(SymbolicName("Var", "x253"),TermAppl("s", List()))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map(Tuple2(SymbolicName("Var", "x253"), ConcreteName("Var", "print", -1)))),SubtypeRelation(List()),List())),print)
-----------------------------------
===================================
2016-12-13T12:11:11.351+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(Var("x415")), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Var", List(Var("x413"))))),List(),List(CGDecl(TermAppl("s", List()),ConcreteName("Type", "int", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Type", "string", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "print", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "flush", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "getchar", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "ord", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "chr", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "size", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "substring", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "concat", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "not", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "exit", -1)), CGRef(SymbolicName("Var", "x413"),TermAppl("s", List()))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map(Tuple2(SymbolicName("Var", "x413"), ConcreteName("Var", "concat", -1)))),SubtypeRelation(List()),List())),concat)
-----------------------------------
===================================
2016-12-13T12:11:13.749+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(Var("x575")), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Var", List(Var("x573"))))),List(),List(CGDecl(TermAppl("s", List()),ConcreteName("Type", "int", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Type", "string", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "print", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "flush", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "getchar", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "ord", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "chr", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "size", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "substring", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "concat", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "not", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "exit", -1)), CGRef(SymbolicName("Var", "x573"),TermAppl("s", List()))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map(Tuple2(SymbolicName("Var", "x573"), ConcreteName("Var", "exit", -1)))),SubtypeRelation(List()),List())),exit)
-----------------------------------
===================================
2016-12-13T12:11:16.06+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(Var("x735")), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Var", List(Var("x733"))))),List(),List(CGDecl(TermAppl("s", List()),ConcreteName("Type", "int", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Type", "string", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "print", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "flush", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "getchar", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "ord", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "chr", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "size", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "substring", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "concat", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "not", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "exit", -1)), CGRef(SymbolicName("Var", "x733"),TermAppl("s", List()))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map(Tuple2(SymbolicName("Var", "x733"), ConcreteName("Var", "not", -1)))),SubtypeRelation(List()),List())),not)
-----------------------------------
===================================
2016-12-13T12:11:18.329+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(Var("x895")), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Var", List(Var("x893"))))),List(),List(CGDecl(TermAppl("s", List()),ConcreteName("Type", "int", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Type", "string", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "print", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "flush", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "getchar", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "ord", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "chr", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "size", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "substring", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "concat", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "not", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "exit", -1)), CGRef(SymbolicName("Var", "x893"),TermAppl("s", List()))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map(Tuple2(SymbolicName("Var", "x893"), ConcreteName("Var", "getchar", -1)))),SubtypeRelation(List()),List())),getchar)
-----------------------------------
===================================
2016-12-13T12:13:51.246+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(Var("x910")), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Array", List(TermAppl("Tid", List(Var("x1463"))), TermAppl("Int", List(Var("x1113"))), TermAppl("Int", List(Var("x1518"))))))),List(CSubtype(TermAppl("INT", List()),TermAppl("INT", List()))),List(CGDecl(TermAppl("s", List()),ConcreteName("Type", "int", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Type", "string", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "print", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "flush", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "getchar", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "ord", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "chr", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "size", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "substring", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "concat", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "not", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "exit", -1)), CGRef(SymbolicName("Type", "x1463"),TermAppl("s", List()))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map(Tuple2(SymbolicName("Type", "x1463"), ConcreteName("Type", "int", -1)))),SubtypeRelation(List()),List())),int[4] of 523010)
-----------------------------------
===================================
2016-12-13T12:13:54.098+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Int", List(Var("x1678"))))),List(),List(CGDecl(TermAppl("s", List()),ConcreteName("Type", "int", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Type", "string", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "print", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "flush", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "getchar", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "ord", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "chr", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "size", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "substring", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "concat", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "not", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),94)
-----------------------------------
===================================
2016-12-13T12:13:57.383+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("INT", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Int", List(Var("x1838"))))),List(),List(CGDecl(TermAppl("s", List()),ConcreteName("Type", "int", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Type", "string", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "print", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "flush", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "getchar", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "ord", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "chr", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "size", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "substring", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "concat", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "not", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),0)
-----------------------------------
===================================
2016-12-13T12:14:00.895+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(Var("x2097")), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Var", List(Var("x2095"))))),List(),List(CGDecl(TermAppl("s", List()),ConcreteName("Type", "int", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Type", "string", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "print", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "flush", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "getchar", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "ord", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "chr", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "size", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "substring", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "concat", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "not", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "exit", -1)), CGRef(SymbolicName("Var", "x2095"),TermAppl("s", List()))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map(Tuple2(SymbolicName("Var", "x2095"), ConcreteName("Var", "chr", -1)))),SubtypeRelation(List()),List())),chr)
-----------------------------------
===================================
2016-12-13T12:14:05.65+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(Var("x2257")), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("Var", List(Var("x2255"))))),List(),List(CGDecl(TermAppl("s", List()),ConcreteName("Type", "int", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Type", "string", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "print", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "flush", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "getchar", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "ord", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "chr", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "size", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "substring", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "concat", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "not", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "exit", -1)), CGRef(SymbolicName("Var", "x2255"),TermAppl("s", List()))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map(Tuple2(SymbolicName("Var", "x2255"), ConcreteName("Var", "size", -1)))),SubtypeRelation(List()),List())),size)
-----------------------------------
===================================
2016-12-13T12:14:08.653+01:00[Europe/Amsterdam]
-----------------------------------
GenerationResult(Rule("Init", SortVar("y"), Some(TermAppl("NIL", List())), List(TermAppl("s", List())), State(TermAppl("Mod", List(TermAppl("NilExp", List()))),List(),List(CGDecl(TermAppl("s", List()),ConcreteName("Type", "int", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Type", "string", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "print", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "flush", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "getchar", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "ord", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "chr", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "size", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "substring", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "concat", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "not", -1)), CGDecl(TermAppl("s", List()),ConcreteName("Var", "exit", -1))),TypeEnv(Map(Binding(ConcreteName("Var", "concat", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "size", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "print", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "ord", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "chr", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("STRING", List())))), Binding(ConcreteName("Type", "string", -1), TermAppl("STRING", List())), Binding(ConcreteName("Var", "substring", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Cons", List(TermAppl("STRING", List()), TermAppl("Nil", List()))))))), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "not", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("INT", List())))), Binding(ConcreteName("Var", "exit", -1), TermAppl("FUN", List(TermAppl("Cons", List(TermAppl("INT", List()), TermAppl("Nil", List()))), TermAppl("UNIT", List())))), Binding(ConcreteName("Var", "getchar", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("STRING", List())))), Binding(ConcreteName("Var", "flush", -1), TermAppl("FUN", List(TermAppl("Nil", List()), TermAppl("UNIT", List())))), Binding(ConcreteName("Type", "int", -1), TermAppl("INT", List())))),Resolution(Map()),SubtypeRelation(List()),List())),nil)
-----------------------------------
